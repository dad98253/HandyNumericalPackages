  
 SUBPAK_PRB
   A set of test programs for SUBPAK.
  
   Today's date: 20010328
   Today's time: 134727.819
  
 TEST001
   ACOSH2 computes the inverse hyperbolic cosine
   of a given value.
  
   X     ACOSH2(X)     COSH(ACOSH2(X))
  
   1.00000       0.00000       1.00000    
   1.20000      0.622362       1.20000    
   1.40000      0.867015       1.40000    
   1.60000       1.04697       1.60000    
   1.80000       1.19291       1.80000    
   2.00000       1.31696       2.00000    
   2.20000       1.42542       2.20000    
   2.40000       1.52208       2.40000    
   2.60000       1.60944       2.60000    
   2.80000       1.68924       2.80000    
   3.00000       1.76275       3.00000    
  
 TEST002
   AGUD computes the inverse Gudermannian;
   GUD computes the Gudermannian.
  
   X     GUD(X)     AGUD(GUD(X))
  
   1.00000      0.865770       1.00000    
   1.20000      0.985692       1.20000    
   1.40000       1.08725       1.40000    
   1.60000       1.17236       1.60000    
   1.80000       1.24316       1.80000    
   2.00000       1.30176       2.00000    
   2.20000       1.35009       2.20000    
   2.40000       1.38986       2.40000    
   2.60000       1.42252       2.60000    
   2.80000       1.44933       2.80000    
   3.00000       1.47130       3.00000    
  
 TEST003
   ASINH2 computes the inverse hyperbolic sine
   of a given value.
  
   X     ASINH2(X)     SINH(ASINH2(X))
  
   1.00000      0.881374       1.00000    
   1.20000       1.01597       1.20000    
   1.40000       1.13798       1.40000    
   1.60000       1.24898       1.60000    
   1.80000       1.35044       1.80000    
   2.00000       1.44364       2.00000    
   2.20000       1.52966       2.20000    
   2.40000       1.60944       2.40000    
   2.60000       1.68374       2.60000    
   2.80000       1.75323       2.80000    
   3.00000       1.81845       3.00000    
  
 TEST004
   ATAN4 computes the arc-tangent given Y and X;
   ATAN2 is the system version of this routine.
  
   X     Y     ATAN2(Y,X)   ATAN4(Y,X)
  
   1.00000       0.00000       0.00000       0.00000    
   1.00000       1.00000      0.785398      0.785398    
   0.00000       1.00000       1.57080       1.57080    
  -1.00000       1.00000       2.35619       2.35619    
  -1.00000       0.00000       3.14159       3.14159    
  -1.00000      -1.00000      -2.35619       3.92699    
   0.00000      -1.00000      -1.57080       4.71239    
   1.00000      -1.00000     -0.785398       5.49779    
  
 TEST005
   ATANH2 computes the inverse hyperbolic tangent
     of a given value.
  
   X     ATANH2(X)     TANH(ATANH2(X))
  
 -0.200000     -0.202733     -0.200000    
 -0.100000     -0.100335     -0.100000    
   0.00000       0.00000       0.00000    
  0.100000      0.100335      0.100000    
  0.200000      0.202733      0.200000    
  0.300000      0.309520      0.300000    
  0.400000      0.423649      0.400000    
  0.500000      0.549306      0.500000    
  0.600000      0.693147      0.600000    
  0.700000      0.867301      0.700000    
  0.800000       1.09861      0.800000    
  0.900000       1.47222      0.900000    
  
 TEST006
   AXIS_LIMITS adjusts plot limits
     to "nicer" values.
  
   Input XMIN, XMAX =    67.30000       114.7000    
   Input NDIVS =            6
  
   Output PXMIN, PXMAX =    60.00000       120.0000    
   Output PXDIV =    10.00000    
   Output NTICKS =            5
  
   Input XMIN, XMAX =   -26.00000       26.00000    
   Input NDIVS =           10
  
   Output PXMIN, PXMAX =   -50.00000       50.00000    
   Output PXDIV =    10.00000    
   Output NTICKS =            5
  
 TEST007
   AXIS_LIMITS computes "nice" limits for a graph
     that must include a given range.
  
   All tests use NDIVS =            5
  
   XMIN  XMAX  PXMIN  PXMAX  PXDIV NTICKS
  
   1.000       9.000       0.000       10.00       2.000         4
   1.003       4.125       1.000       6.000       1.000         5
   101.3       193.8       100.0       200.0       20.00         4
   2000.       2000.       2000.       2000.      0.4000E-01     4
  -7.000       12.00      -8.000       12.00       4.000         4
  
 TEST008
   BAR_CHECK checks digits for a barcode;
   BAR_CODE computes the barcode for a string of
     11 digits;
   BAR_DIGIT_CODE returns the left and right codes
     for each digit.
  
   Check digit is            5
  
   Digit code:
  
 0  0001101  1110010
 1  0011001  1100110
 2  0010011  1101100
 3  0111101  1000010
 4  0100011  1011100
 5  0110001  1001110
 6  0101111  1010000
 7  0111011  1000100
 8  0110111  1001000
 9  0001011  1110100
  
   Bar code:
  
000000000
101
0001101
0011001
0010011
0111101
0100011
0110001
01010
1010000
1000100
1001000
1110100
1110010
1001110
101
000000000
  
 TEST0083
   BMI_ENGLISH computes the Body Mass Index
   given body measurements in English Units.
  
   Weight(LB)  Height (FT/IN)  BMI
  
    248.29      6.00      1.00     32.76
    191.94      5.00      9.00     28.34
    141.06      5.00     11.00     19.67
    105.26      4.00      1.00     30.82
    199.11      4.00     10.00     41.61
    138.60      5.00      6.00     22.37
    222.28      5.00      1.00     42.00
    150.39      6.00      6.00     17.38
    131.23      4.00      5.00     32.85
    179.36      5.00      7.00     28.09
  
 TEST0085
   CHVEC_PERMUTE applies a permutation to a character vector.
  
   Using random number seed ISEED =   1335771941
  
  The random permutation:
  
     1    2
     2    4
     3    3
     4    6
     5    8
     6    5
     7    1
     8    9
     9    7
    10   10
  
  CHVEC before permutation:
  
     1  A
     2  B
     3  C
     4  D
     5  E
     6  F
     7  G
     8  H
     9  I
    10  J
  
  CHVEC after permutation:
  
     1  B
     2  D
     3  C
     4  F
     5  H
     6  E
     7  A
     8  I
     9  G
    10  J
  
 TEST011
   For products of prime factors:
   FAC_DIV computes a quotient;
   FAC_MUL multiplies;
   FAC_LCM computes the LCM;
   FAC_GCD computes the GCD;
   I_TO_FAC converts an integer;
   FAC_TO_I converts to an integer.
   FAC_TO_RAT converts to a ratio.
  
   Representation of I1 =          720
  
  
    Prime     Power
  
       2         4
       3         2
       5         1
  
   Representation of I2 =           42
  
  
    Prime     Power
  
       2         1
       3         1
       7         1
  
   LCM of I1, I2:
  
  
    Prime     Power
  
       2         4
       3         2
       5         1
       7         1
  
   GCD of I1, I2:
  
  
    Prime     Power
  
       2         1
       3         1
  
   Product of I1, I2:
  
  
    Prime     Power
  
       2         5
       3         3
       5         1
       7         1
  
   Quotient of I2 / I1:
  
  
    Prime     Power
  
       2        -3
       3        -1
       5        -1
       7         1
  
 Quotient as a rational:            7  /          120
  
 TEST012
   GET_SEED gets a seed for the random number
     generator.  These values are computed from
     the time and date.  Values computed nearby
     in time will be near to each other, and
     should be passed through a random number
     generator a few times before use.
  
      I         R(I)        R2(I)        R3(I)
  
  1337205030   988573355  2018884293  1146689851
  1337205030   988573355  2018884293  1146689851
  1337205030   988573355  2018884293  1146689851
  1337205030   988573355  2018884293  1146689851
  1337205030   988573355  2018884293  1146689851
  1337205030   988573355  2018884293  1146689851
  1337205030   988573355  2018884293  1146689851
  1337563302   567599918   529461852  1640597043
  1337563302   567599918   529461852  1640597043
  1337563302   567599918   529461852  1640597043
  
 TEST013
   GRID1 computes a 1D grid between
     two NDIM dimensional points X1 and X2.
  
   Here, we will use           11  steps
   going from 
   1.000       0.000       20.00      -5.000       1.000    
   to
   1.000       10.00       0.000       5.000       2.000    
  
  
  The grid matrix:
  
            1             2             3             4             5
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2   0.00000       1.00000       2.00000       3.00000       4.00000    
     3   20.0000       18.0000       16.0000       14.0000       12.0000    
     4  -5.00000      -4.00000      -3.00000      -2.00000      -1.00000    
     5   1.00000       1.10000       1.20000       1.30000       1.40000    
  
            6             7             8             9            10
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2   5.00000       6.00000       7.00000       8.00000       9.00000    
     3   10.0000       8.00000       6.00000       4.00000       2.00000    
     4   0.00000       1.00000       2.00000       3.00000       4.00000    
     5   1.50000       1.60000       1.70000       1.80000       1.90000    
  
           11
  
     1   1.00000    
     2   10.0000    
     3   0.00000    
     4   5.00000    
     5   2.00000    
  
 TEST014
   GRID1N computes a 1D grid between
     two NDIM dimensional points X1 and X2,
     one point at a time.
  
   Here, we will use           11  steps
   going from 
   1.000       0.000       20.00      -5.000       1.000    
   to
   1.000       10.00       0.000       5.000       2.000    
  
  1   1.000       0.000       20.00      -5.000       1.000    
  2   1.000       1.000       18.00      -4.000       1.100    
  3   1.000       2.000       16.00      -3.000       1.200    
  4   1.000       3.000       14.00      -2.000       1.300    
  5   1.000       4.000       12.00      -1.000       1.400    
  6   1.000       5.000       10.00       0.000       1.500    
  7   1.000       6.000       8.000       1.000       1.600    
  8   1.000       7.000       6.000       2.000       1.700    
  9   1.000       8.000       4.000       3.000       1.800    
 10   1.000       9.000       2.000       4.000       1.900    
 11   1.000       10.00       0.000       5.000       2.000    
  
 TEST015
   GRID2 computes a 1 D grid between
     two NDIM dimensional points X1 and X2,
     computing X1 and X2 at user specified times.
  
   Here, we will use           20  steps,
   and on step            3  we will compute
   1.000       0.000       20.00      -5.000       1.000    
   and on step           13  we will compute
   1.000       10.00       0.000       5.000       2.000    
  
  
  The grid matrix:
  
            1             2             3             4             5
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2  -2.00000      -1.00000       0.00000       1.00000       2.00000    
     3   24.0000       22.0000       20.0000       18.0000       16.0000    
     4  -7.00000      -6.00000      -5.00000      -4.00000      -3.00000    
     5  0.800000      0.900000       1.00000       1.10000       1.20000    
  
            6             7             8             9            10
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2   3.00000       4.00000       5.00000       6.00000       7.00000    
     3   14.0000       12.0000       10.0000       8.00000       6.00000    
     4  -2.00000      -1.00000       0.00000       1.00000       2.00000    
     5   1.30000       1.40000       1.50000       1.60000       1.70000    
  
           11            12            13            14            15
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2   8.00000       9.00000       10.0000       11.0000       12.0000    
     3   4.00000       2.00000       0.00000      -2.00000      -4.00000    
     4   3.00000       4.00000       5.00000       6.00000       7.00000    
     5   1.80000       1.90000       2.00000       2.10000       2.20000    
  
           16            17            18            19            20
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2   13.0000       14.0000       15.0000       16.0000       17.0000    
     3  -6.00000      -8.00000      -10.0000      -12.0000      -14.0000    
     4   8.00000       9.00000       10.0000       11.0000       12.0000    
     5   2.30000       2.40000       2.50000       2.60000       2.70000    
  
 TEST016
   GRID2N computes points from a 1D grid
     between two NDIM dimensional points
     X1 and X2, one at a time, with X1 and X2
     having user specified I coordinates.
  
   Here, on step            3  we would compute
   1.000       0.000       20.00      -5.000       1.000    
   and on step           13  we would compute
   1.000       10.00       0.000       5.000       2.000    
  
  1   1.000      -2.000       24.00      -7.000      0.8000    
  2   1.000      -1.000       22.00      -6.000      0.9000    
  3   1.000       0.000       20.00      -5.000       1.000    
  4   1.000       1.000       18.00      -4.000       1.100    
  5   1.000       2.000       16.00      -3.000       1.200    
  6   1.000       3.000       14.00      -2.000       1.300    
  7   1.000       4.000       12.00      -1.000       1.400    
  8   1.000       5.000       10.00       0.000       1.500    
  9   1.000       6.000       8.000       1.000       1.600    
 10   1.000       7.000       6.000       2.000       1.700    
 11   1.000       8.000       4.000       3.000       1.800    
 12   1.000       9.000       2.000       4.000       1.900    
 13   1.000       10.00       0.000       5.000       2.000    
 14   1.000       11.00      -2.000       6.000       2.100    
 15   1.000       12.00      -4.000       7.000       2.200    
 16   1.000       13.00      -6.000       8.000       2.300    
 17   1.000       14.00      -8.000       9.000       2.400    
 18   1.000       15.00      -10.00       10.00       2.500    
 19   1.000       16.00      -12.00       11.00       2.600    
 20   1.000       17.00      -14.00       12.00       2.700    
  
 TEST017
   GRID3 computes a 2D grid in the plane
     containing the NDIM-dimensional
     points X1, X2 and X3.
  
   Here, we will use            3  steps
   going from 
   1.000       0.000       20.00      -5.000       1.000    
   to
   1.000       10.00       0.000       5.000       2.000    
   and            6  steps going to 
   1.000       5.000       0.000       0.000       3.000    
  
  
  1  1   1.000       0.000       20.00      -5.000       1.000    
  1  2   1.000       1.000       16.00      -4.000       1.400    
  1  3   1.000       2.000       12.00      -3.000       1.800    
  1  4   1.000       3.000       8.000      -2.000       2.200    
  1  5   1.000       4.000       4.000      -1.000       2.600    
  1  6   1.000       5.000       0.000       0.000       3.000    
  
  2  1   1.000       5.000       10.00       0.000       1.500    
  2  2   1.000       6.000       6.000       1.000       1.900    
  2  3   1.000       7.000       2.000       2.000       2.300    
  2  4   1.000       8.000      -2.000       3.000       2.700    
  2  5   1.000       9.000      -6.000       4.000       3.100    
  2  6   1.000       10.00      -10.00       5.000       3.500    
  
  3  1   1.000       10.00       0.000       5.000       2.000    
  3  2   1.000       11.00      -4.000       6.000       2.400    
  3  3   1.000       12.00      -8.000       7.000       2.800    
  3  4   1.000       13.00      -12.00       8.000       3.200    
  3  5   1.000       14.00      -16.00       9.000       3.600    
  3  6   1.000       15.00      -20.00       10.00       4.000    
  
 TEST018
   GRID3D computes a point from a 2D
     grid in the plane containing the 
     NDIM-dimensional points X1, X2 and X3.
  
   We use            3  steps from 
   1.000       0.000       20.00      -5.000       1.000    
   to
   1.000       10.00       0.000       5.000       2.000    
   and            6  steps going to 
   1.000       5.000       0.000       0.000       3.000    
  
  
  1  1   1.000       0.000       20.00      -5.000       1.000    
  1  2   1.000       1.000       16.00      -4.000       1.400    
  1  3   1.000       2.000       12.00      -3.000       1.800    
  1  4   1.000       3.000       8.000      -2.000       2.200    
  1  5   1.000       4.000       4.000      -1.000       2.600    
  1  6   1.000       5.000       0.000       0.000       3.000    
  
  2  1   1.000       5.000       10.00       0.000       1.500    
  2  2   1.000       6.000       6.000       1.000       1.900    
  2  3   1.000       7.000       2.000       2.000       2.300    
  2  4   1.000       8.000      -2.000       3.000       2.700    
  2  5   1.000       9.000      -6.000       4.000       3.100    
  2  6   1.000       10.00      -10.00       5.000       3.500    
  
  3  1   1.000       10.00       0.000       5.000       2.000    
  3  2   1.000       11.00      -4.000       6.000       2.400    
  3  3   1.000       12.00      -8.000       7.000       2.800    
  3  4   1.000       13.00      -12.00       8.000       3.200    
  3  5   1.000       14.00      -16.00       9.000       3.600    
  3  6   1.000       15.00      -20.00       10.00       4.000    
  
 TEST019
   GRID4 computes a 2D planar grid
     containing the NDIM-dimensional
     points X1, X2 and X3.
  
   We compute the points on the following steps:
  
   X1 on step            2           3
   X2 on step            5           3
   X3 on step            2           9
  
   We use            6  steps in the I direction
   and           10  steps in the J direction.
  
   The points X1, X2 and X3 are:
  
   1.000       0.000       20.00      -5.000       1.000    
  
   1.000       10.00       0.000       5.000       2.000    
  
   1.000       5.000       0.000       0.000       3.000    
  
  
  1  1   1.000      -5.000       33.33      -10.00       0.000    
  1  2   1.000      -4.167       30.00      -9.167      0.3333    
  1  3   1.000      -3.333       26.67      -8.333      0.6667    
  1  4   1.000      -2.500       23.33      -7.500       1.000    
  1  5   1.000      -1.667       20.00      -6.667       1.333    
  1  6   1.000     -0.8333       16.67      -5.833       1.667    
  1  7   1.000       0.000       13.33      -5.000       2.000    
  1  8   1.000      0.8333       10.00      -4.167       2.333    
  1  9   1.000       1.667       6.667      -3.333       2.667    
  1 10   1.000       2.500       3.333      -2.500       3.000    
  
  2  1   1.000      -1.667       26.67      -6.667      0.3333    
  2  2   1.000     -0.8333       23.33      -5.833      0.6667    
  2  3   1.000       0.000       20.00      -5.000       1.000    
  2  4   1.000      0.8333       16.67      -4.167       1.333    
  2  5   1.000       1.667       13.33      -3.333       1.667    
  2  6   1.000       2.500       10.00      -2.500       2.000    
  2  7   1.000       3.333       6.667      -1.667       2.333    
  2  8   1.000       4.167       3.333     -0.8333       2.667    
  2  9   1.000       5.000       0.000       0.000       3.000    
  2 10   1.000       5.833      -3.333      0.8333       3.333    
  
  3  1   1.000       1.667       20.00      -3.333      0.6667    
  3  2   1.000       2.500       16.67      -2.500       1.000    
  3  3   1.000       3.333       13.33      -1.667       1.333    
  3  4   1.000       4.167       10.00     -0.8333       1.667    
  3  5   1.000       5.000       6.667      0.3576E-06   2.000    
  3  6   1.000       5.833       3.333      0.8333       2.333    
  3  7   1.000       6.667     -0.1192E-05   1.667       2.667    
  3  8   1.000       7.500      -3.333       2.500       3.000    
  3  9   1.000       8.333      -6.667       3.333       3.333    
  3 10   1.000       9.167      -10.00       4.167       3.667    
  
  4  1   1.000       5.000       13.33      0.4768E-06   1.000    
  4  2   1.000       5.833       10.00      0.8333       1.333    
  4  3   1.000       6.667       6.667       1.667       1.667    
  4  4   1.000       7.500       3.333       2.500       2.000    
  4  5   1.000       8.333     -0.5960E-06   3.333       2.333    
  4  6   1.000       9.167      -3.333       4.167       2.667    
  4  7   1.000       10.00      -6.667       5.000       3.000    
  4  8   1.000       10.83      -10.00       5.833       3.333    
  4  9   1.000       11.67      -13.33       6.667       3.667    
  4 10   1.000       12.50      -16.67       7.500       4.000    
  
  5  1   1.000       8.333       6.667       3.333       1.333    
  5  2   1.000       9.167       3.333       4.167       1.667    
  5  3   1.000       10.00       0.000       5.000       2.000    
  5  4   1.000       10.83      -3.333       5.833       2.333    
  5  5   1.000       11.67      -6.667       6.667       2.667    
  5  6   1.000       12.50      -10.00       7.500       3.000    
  5  7   1.000       13.33      -13.33       8.333       3.333    
  5  8   1.000       14.17      -16.67       9.167       3.667    
  5  9   1.000       15.00      -20.00       10.00       4.000    
  5 10   1.000       15.83      -23.33       10.83       4.333    
  
  6  1   1.000       11.67     -0.5960E-06   6.667       1.667    
  6  2   1.000       12.50      -3.333       7.500       2.000    
  6  3   1.000       13.33      -6.667       8.333       2.333    
  6  4   1.000       14.17      -10.00       9.167       2.667    
  6  5   1.000       15.00      -13.33       10.00       3.000    
  6  6   1.000       15.83      -16.67       10.83       3.333    
  6  7   1.000       16.67      -20.00       11.67       3.667    
  6  8   1.000       17.50      -23.33       12.50       4.000    
  6  9   1.000       18.33      -26.67       13.33       4.333    
  6 10   1.000       19.17      -30.00       14.17       4.667    
  
 TEST020
   GRID4N computes, one at a time, points
     on a 2D grid in the plane containing
     the NDIM-dimensional points X1, X2 and X3.
  
   We wish to compute the points on the following
   steps:
  
   X1 on step            2           3
   X2 on step            5           3
   X3 on step            2           9
  
   We use            6  steps in the I direction
   and           10  steps in the J direction.
  
   The points X1, X2 and X3 are:
  
   1.000       0.000       20.00      -5.000       1.000    
  
   1.000       10.00       0.000       5.000       2.000    
  
   1.000       5.000       0.000       0.000       3.000    
  
  
  1  1   1.000      -5.000       33.33      -10.00       0.000    
  1  2   1.000      -4.167       30.00      -9.167      0.3333    
  1  3   1.000      -3.333       26.67      -8.333      0.6667    
  1  4   1.000      -2.500       23.33      -7.500       1.000    
  1  5   1.000      -1.667       20.00      -6.667       1.333    
  1  6   1.000     -0.8333       16.67      -5.833       1.667    
  1  7   1.000       0.000       13.33      -5.000       2.000    
  1  8   1.000      0.8333       10.00      -4.167       2.333    
  1  9   1.000       1.667       6.667      -3.333       2.667    
  1 10   1.000       2.500       3.333      -2.500       3.000    
  
  2  1   1.000      -1.667       26.67      -6.667      0.3333    
  2  2   1.000     -0.8333       23.33      -5.833      0.6667    
  2  3   1.000       0.000       20.00      -5.000       1.000    
  2  4   1.000      0.8333       16.67      -4.167       1.333    
  2  5   1.000       1.667       13.33      -3.333       1.667    
  2  6   1.000       2.500       10.00      -2.500       2.000    
  2  7   1.000       3.333       6.667      -1.667       2.333    
  2  8   1.000       4.167       3.333     -0.8333       2.667    
  2  9   1.000       5.000       0.000       0.000       3.000    
  2 10   1.000       5.833      -3.333      0.8333       3.333    
  
  3  1   1.000       1.667       20.00      -3.333      0.6667    
  3  2   1.000       2.500       16.67      -2.500       1.000    
  3  3   1.000       3.333       13.33      -1.667       1.333    
  3  4   1.000       4.167       10.00     -0.8333       1.667    
  3  5   1.000       5.000       6.667      0.3576E-06   2.000    
  3  6   1.000       5.833       3.333      0.8333       2.333    
  3  7   1.000       6.667     -0.1192E-05   1.667       2.667    
  3  8   1.000       7.500      -3.333       2.500       3.000    
  3  9   1.000       8.333      -6.667       3.333       3.333    
  3 10   1.000       9.167      -10.00       4.167       3.667    
  
  4  1   1.000       5.000       13.33      0.4768E-06   1.000    
  4  2   1.000       5.833       10.00      0.8333       1.333    
  4  3   1.000       6.667       6.667       1.667       1.667    
  4  4   1.000       7.500       3.333       2.500       2.000    
  4  5   1.000       8.333     -0.5960E-06   3.333       2.333    
  4  6   1.000       9.167      -3.333       4.167       2.667    
  4  7   1.000       10.00      -6.667       5.000       3.000    
  4  8   1.000       10.83      -10.00       5.833       3.333    
  4  9   1.000       11.67      -13.33       6.667       3.667    
  4 10   1.000       12.50      -16.67       7.500       4.000    
  
  5  1   1.000       8.333       6.667       3.333       1.333    
  5  2   1.000       9.167       3.333       4.167       1.667    
  5  3   1.000       10.00       0.000       5.000       2.000    
  5  4   1.000       10.83      -3.333       5.833       2.333    
  5  5   1.000       11.67      -6.667       6.667       2.667    
  5  6   1.000       12.50      -10.00       7.500       3.000    
  5  7   1.000       13.33      -13.33       8.333       3.333    
  5  8   1.000       14.17      -16.67       9.167       3.667    
  5  9   1.000       15.00      -20.00       10.00       4.000    
  5 10   1.000       15.83      -23.33       10.83       4.333    
  
  6  1   1.000       11.67     -0.5960E-06   6.667       1.667    
  6  2   1.000       12.50      -3.333       7.500       2.000    
  6  3   1.000       13.33      -6.667       8.333       2.333    
  6  4   1.000       14.17      -10.00       9.167       2.667    
  6  5   1.000       15.00      -13.33       10.00       3.000    
  6  6   1.000       15.83      -16.67       10.83       3.333    
  6  7   1.000       16.67      -20.00       11.67       3.667    
  6  8   1.000       17.50      -23.33       12.50       4.000    
  6  9   1.000       18.33      -26.67       13.33       4.333    
  6 10   1.000       19.17      -30.00       14.17       4.667    
  
 TEST021
   I_FACTOR factors an integer,
  
   The integer is         2516
  
   Prime representation:
  
   I, FACTOR(I), POWER(I)
  
           1           2           2
           2          17           1
           3          37           1
  
 TEST022
   I_IS_PRIME reports whether an integer is prime.
  
   I     I_IS_PRIME(I)
  
          -2 F
          -1 F
           0 F
           1 T
           2 T
           3 T
           4 F
           5 T
           6 F
           7 T
           8 F
           9 F
          10 F
          11 T
          12 F
          13 T
          14 F
          15 F
          16 F
          17 T
          18 F
          19 T
          20 F
          21 F
          22 F
          23 T
          24 F
          25 F
  
 TEST023
   I_LOG_2: whole part of log base 2.
   R_LOG_2: log base 2,
  
   X, LOG(X)/LOG(2), R_LOG_2, I_LOG_2
  
   0.00000       0.00000       0.00000         0
   1.00000       0.00000       0.00000         0
   2.00000       1.00000       0.00000         1
   3.00000       1.58496       1.58496         1
   9.00000       3.16992       3.16992         3
   10.0000       3.32193       3.32193         3
   11.0000       3.45943       3.45943         3
   99.0000       6.62936       6.62936         6
   101.000       6.65821       6.65821         6
  -1.00000       0.00000       0.00000         0
  -2.00000       0.00000       0.00000         1
  -3.00000       0.00000       0.00000         1
  -9.00000       0.00000       0.00000         3
  0.500000      -1.00000       0.00000        -1
  0.333333      -1.58496      -1.58496        -1
  0.250000      -2.00000       0.00000        -2
  0.200000      -2.32193      -2.32193        -2
  0.101010E-01  -6.62936      -6.62936        -6
  0.100000E-01  -6.64386      -6.64386        -6
  0.990099E-02  -6.65821      -6.65821        -6
  
 TEST024
   I_LOG_10: whole part of log base 10,
  
   X, LOG10(|X|), I_LOG_10
  
   0.00000       0.00000         0
   1.00000       0.00000         0
   2.00000      0.301030         0
   3.00000      0.477121         0
   9.00000      0.954243         0
   10.0000       1.00000         1
   11.0000       1.04139         1
   99.0000       1.99564         1
   101.000       2.00432         2
  -1.00000       0.00000         0
  -2.00000      0.301030         0
  -3.00000      0.477121         0
  -9.00000      0.954243         0
  0.500000     -0.301030         0
  0.333333     -0.477121         0
  0.250000     -0.602060         0
  0.200000     -0.698970         0
  0.101010E-01  -1.99564        -1
  0.100000E-01  -2.00000        -2
  0.990099E-02  -2.00432        -2
  
 TEST025
   I_MODDIV factors a number
     into a multiple and a remainder.
  
     Number   Divisor  Multiple Remainder
  
       107        50         2         7
       107       -50        -2         7
      -107        50        -2        -7
      -107       -50         2        -7
  
   Repeat using FORTRAN MOD:
  
       107        50         2         7
       107       -50        -2         7
      -107        50        -2        -7
      -107       -50         2        -7
  
   Repeat using I_MODP:
  
       107        50         2         7
       107       -50        -2         7
      -107        50        -3        43
      -107       -50         3        43
  
 TEST026
   I_ROUNDUP rounds reals up.
  
  -1.20000          -1
  -1.00000          -1
 -0.800000           0
 -0.600000           0
 -0.400000           0
 -0.200000           0
   0.00000           0
  0.200000           1
  0.400000           1
  0.600000           1
  0.800000           1
   1.00000           1
   1.20000           2
  
 TEST027
   I_GCD computes the greatest common factor,
   I_LCM computes the least common multiple.
  
      I     J   I_GCD   I_LCM
  
    36    30     6   180
    49    -7     7    49
     0    71    71     0
    12    12    12    12
    36    49     1  1764
     1    42     1    42
    91    28     7   364
  
 TEST028
   I_JACOBI_SYMBOL computes the Jacobi symbol
     (Q/P), which records if Q is a quadratic 
     residue modulo the number P.
  
 Jacobi Symbols for P =            3
  
       3       0       0
       3       1       1
       3       2      -1
       3       3       0
  
 Jacobi Symbols for P =            9
  
       9       0       0
       9       1       1
       9       2       1
       9       3       0
       9       4       1
       9       5       1
       9       6       0
       9       7       1
       9       8       1
       9       9       0
  
 Jacobi Symbols for P =           10
  
      10       0       0
      10       1       1
      10       2       0
      10       3      -1
      10       4       0
      10       5       0
      10       6       0
      10       7      -1
      10       8       0
      10       9       1
      10      10       0
  
 Jacobi Symbols for P =           12
  
      12       0       0
      12       1       1
      12       2       0
      12       3       0
      12       4       0
      12       5      -1
      12       6       0
      12       7       1
      12       8       0
      12       9       0
      12      10       0
      12      11      -1
      12      12       0
  
 TEST029
   I_LEGENDRE_SYMBOL computes the Legendre
     symbol (Q/P) which records whether Q is 
     a quadratic residue modulo the prime P.
  
 Legendre Symbols for P =            7
  
       7       0       0
       7       1       1
       7       2       1
       7       3      -1
       7       4       1
       7       5      -1
       7       6      -1
       7       7       0
  
 Legendre Symbols for P =           11
  
      11       0       0
      11       1       1
      11       2      -1
      11       3       1
      11       4       1
      11       5       1
      11       6      -1
      11       7      -1
      11       8      -1
      11       9       1
      11      10      -1
      11      11       0
  
 Legendre Symbols for P =           13
  
      13       0       0
      13       1       1
      13       2      -1
      13       3       1
      13       4       1
      13       5      -1
      13       6      -1
      13       7      -1
      13       8      -1
      13       9       1
      13      10       1
      13      11      -1
      13      12       1
      13      13       0
  
 Legendre Symbols for P =           17
  
      17       0       0
      17       1       1
      17       2       1
      17       3      -1
      17       4       1
      17       5      -1
      17       6      -1
      17       7      -1
      17       8       1
      17       9       1
      17      10      -1
      17      11      -1
      17      12      -1
      17      13       1
      17      14      -1
      17      15       1
      17      16       1
      17      17       0
  
 TEST030
   I_MANT decomposes an integer,
  
   Number to be decomposed is X =   -314.1590    
  
   I_MANT: X =           -1  * (     5147181 /     4194304 ) * 2**           8
  
 TEST031
   I_MEMORY
  
I_MEMORY - Value of IVAN is        1
I_MEMORY - Value of JACK is        2
I_MEMORY - Value of KYLE is        3
  
I_MEMORY - Value of IVAN is        1
 INC IVAN 100:
I_MEMORY - Value of IVAN is      101
  
 PUSH IVAN 17
I_MEMORY - Value of IVAN is       17
 INC IVAN 100
I_MEMORY - Value of IVAN is      117
 POP IVAN =          117
I_MEMORY - Value of IVAN is      101
  
 SET JACK 99:
I_MEMORY - Value of JACK is       99
  
 INC JACK 100:
I_MEMORY - Value of JACK is      199
  
 PRINT *
I_MEMORY - Value of IVAN is      101
I_MEMORY - Value of JACK is      199
I_MEMORY - Value of KYLE is        3
I_MEMORY - Value of LOU is      -33
  
 TEST032
   I_MOEBIUS computes the Moebius function;
   I_OMEGA counts the distinct prime divisors of N;
   I_PHI computes the number of values less than N
     and relatively prime to N;
   I_TAU computes the number of factors;
   I_SIGMA computes the sum of factors.
  
   N  PHI(N), TAU(N), SIGMA(N), MU(N)  OMEGA(N)
  
    1    1    1    1    1    1
    2    1    2    3   -1    1
    3    2    2    4   -1    1
    4    2    3    7    0    1
    5    4    2    6   -1    1
    6    2    4   12    1    2
    7    6    2    8   -1    1
    8    4    4   15    0    1
    9    6    3   13    0    1
   10    4    4   18    1    2
   11   10    2   12   -1    1
   12    4    6   28    0    2
   13   12    2   14   -1    1
   14    6    4   24    1    2
   15    8    4   24    1    2
   16    8    5   31    0    1
   17   16    2   18   -1    1
   18    6    6   39    0    2
   19   18    2   20   -1    1
   20    8    6   42    0    2
  
 TEST033
   I_SIGN returns the sign of a number.
  
   -10    -1
    -7    -1
     0     0
     5     1
     9     1
  
 TEST888
   R_TO_R_DISCRETE maps real numbers to a discrete set
   of equally spaced real numbers in an interval.
  
   Number of discrete values =           19
   Real interval:    1.000000       10.00000    
  
   R   RD
  
   9.34662       9.50000    
   6.60100       6.50000    
   10.9307       10.0000    
   5.64954       5.50000    
   9.81429       10.0000    
   1.85479       2.00000    
   9.39988       9.50000    
   4.77760       5.00000    
   6.07801       6.00000    
   9.13542       9.00000    
   5.96979       6.00000    
   10.2575       10.0000    
   1.81941       2.00000    
 -0.142822       1.00000    
   1.58315       1.50000    
  
 TEST034
   For data in an interval,
   IINT_TO_RINT converts an integer to a real;
   RINT_TO_IINT converts a real to an integer.
  
   Integer interval:            1          11
   Real interval:    100.0000       200.0000    
  
   R   I(R)  R(I(R))
  
   165.309         8   170.000    
   182.304         9   180.000    
   201.884        11   200.000    
   117.386         3   120.000    
   85.4207         0   90.0000    
   135.624         5   140.000    
   203.430        11   200.000    
   115.087         3   120.000    
   183.930         9   180.000    
   108.209         2   110.000    
  
 TEST0345
   I_WRAP forces an integer to lie within given limits.
  
   ILO =            4  IHI =            8
  
      I  I_WRAP(I)
  
   -10     5
    -9     6
    -8     7
    -7     8
    -6     4
    -5     5
    -4     6
    -3     7
    -2     8
    -1     4
     0     5
     1     6
     2     7
     3     8
     4     4
     5     5
     6     6
     7     7
     8     8
     9     4
    10     5
    11     6
    12     7
    13     8
    14     4
    15     5
    16     6
    17     7
    18     8
    19     4
    20     5
  
 TEST035
   ICOL_SORT_A ascending sorts an integer array
     as a table of columns.
   ICOL_SORT_D descending sorts an integer array
     as a table of columns.
  
  The original matrix:
  
            1      2      3      4
  
     1      7     10      8      9
     2      8      8      3      4
     3      2      1      8      1
     4      7      2      7      2
     5      5      9      9      6
  
  Ascending sorted:
  
            1      2      3      4
  
     1      7      8      9     10
     2      8      3      4      8
     3      2      8      1      1
     4      7      7      2      2
     5      5      9      6      9
  
  Descending sorted:
  
            1      2      3      4
  
     1     10      9      8      7
     2      8      4      3      8
     3      1      1      8      2
     4      2      2      7      7
     5      9      6      9      5
  
 TEST036
   IMAT_RED divides common factors in a matrix;
   IMAT_ELIM does exact Gauss elimination.
  
  
  The original matrix:
  
            1      2      3      4      5
  
     1      1      2      3      4      5
     2      6      7      8      9     10
     3     11     12     13     14     15
     4     16     17     18     19     20
     5     21     22     23     24     25
  
   The matrix, as returned by IMAT_RED:
  
       1       2       3       4       1       1
       6       7       8       9       2       1
      11      12      13      14       3       1
      16      17      18      19       4       1
      21      22      23      24       5       1
       1       1       1       1       5
  
  The matrix returned by IMAT_ELIM:
  
            1      2      3      4      5
  
     1      1     22     23      8      5
     2      0     -5    -10     -5     -4
     3      0      0      0      0      0
     4      0      0      0      0      0
     5      0      0      0      0      0
  
  The original matrix:
  
            1      2      3      4      5
  
     1  40320  20160  13440  10080   8064
     2  20160  13440  10080   8064   6720
     3  13440  10080   8064   6720   5760
     4  10080   8064   6720   5760   5040
     5   8064   6720   5760   5040   4480
  
   The matrix, as returned by IMAT_RED:
  
      30      15      70     105     252       2
      30      20     105     168     420       1
      20      15      84     140     360       1
      15      12      70     120     315       1
      12      10      60     105     280       1
     672     672      96      48      16
  
  The matrix returned by IMAT_ELIM:
  
            1      2      3      4      5
  
     1      1      3      7      7     63
     2      0     -4    -16    -21   -224
     3      0      0      4      9    126
     4      0      0      0      1     24
     5      0      0      0      0      1
  
  The original matrix:
  
            1      2      3      4      5
  
     1      1      2      3      4      5
     2      2      4      6      8     10
     3      3      6      9     12     15
     4      4      8     12     16     20
  
   The matrix, as returned by IMAT_RED:
  
       1       1       1       1       1       1
       1       1       1       1       1       2
       1       1       1       1       1       3
       1       1       1       1       1       4
       1       2       3       4       5
  
  The matrix returned by IMAT_ELIM:
  
            1      2      3      4      5
  
     1      1      1      1      1      1
     2      0      0      0      0      0
     3      0      0      0      0      0
     4      0      0      0      0      0
  
 TEST0365
   IMAT_L1_INVERSE inverts a unit lower triangular matrix.
  
  
  The original matrix:
  
            1      2      3      4      5      6
  
     1      1      0      0      0      0      0
     2      2      1      0      0      0      0
     3      0      0      1      0      0      0
     4      5      0      3      1      0      0
     5      0      0      0      0      1      0
     6     75      0      0      6      4      1
  
  The inverse matrix:
  
            1      2      3      4      5      6
  
     1      1      0      0      0      0      0
     2     -2      1      0      0      0      0
     3      0      0      1      0      0      0
     4     -5      0     -3      1      0      0
     5      0      0      0      0      1      0
     6    -45      0     18     -6     -4      1
  
  The product:
  
            1      2      3      4      5      6
  
     1      1      0      0      0      0      0
     2      0      1      0      0      0      0
     3      0      0      1      0      0      0
     4      0      0      0      1      0      0
     5      0      0      0      0      1      0
     6      0      0      0      0      0      1
  
 TEST0366
   IMAT_IMAX locates the maximum;
   IMAT_IMIN locates the maximum;
   IMAT_MAX computes the maximum;
   IMAT_MIN computes the minimum;
  
  
  Random array:
  
            1      2      3      4      5      6      7
  
     1      8      8      0      9      7      9      4
     2      1      0     10      4      8      7      2
     3      0      7      0      2      4      6      1
     4      5      2      1      6      6      7      3
     5      3      9      1      4      5     10      3
  
   Minimum, Maximum =                        0          10
   Maximum I,J indices                       2           3
   Minimum I,J indices                       3           1
  
 TEST037
   IMAT_PERM_RANDOM applies a random permutation
     to a square integer matrix.
  
  
  The original matrix:
  
            1      2      3      4      5
  
     1     11     12     13     14     15
     2     21     22     23     24     25
     3     31     32     33     34     35
     4     41     42     43     44     45
     5     51     52     53     54     55
  
  The permuted matrix:
  
            1      2      3      4      5
  
     1     11     12     13     14     15
     2     21     22     23     24     25
     3     31     32     33     34     35
     4     41     42     43     44     45
     5     51     52     53     54     55
  
 TEST038
   For a rectangular integer matrix:
   IMAT_PERM2_RANDOM applies independent
     random permutations to rows and columns;
   IROW_SORT_D sorts the rows;
   IROW_SORT2_D sorts the elements of the rows.
  
  The original matrix:
  
            1      2      3      4
  
     1     11     12     13     14
     2     21     22     23     24
     3     31     32     33     34
     4     41     42     43     44
     5     51     52     53     54
     6     61     62     63     64
  
  
  The permuted matrix:
  
            1      2      3      4
  
     1     64     62     61     63
     2     34     32     31     33
     3     14     12     11     13
     4     44     42     41     43
     5     24     22     21     23
     6     54     52     51     53
  
  The row-sorted matrix:
  
            1      2      3      4
  
     1     64     62     61     63
     2     54     52     51     53
     3     44     42     41     43
     4     34     32     31     33
     5     24     22     21     23
     6     14     12     11     13
  
  The element-sorted row-sorted matrix:
  
            1      2      3      4
  
     1     64     63     62     61
     2     54     53     52     51
     3     44     43     42     41
     4     34     33     32     31
     5     24     23     22     21
     6     14     13     12     11
  
 TEST0385
   IMAT_U1_INVERSE inverts a unit upper triangular matrix.
  
  
  The original matrix:
  
            1      2      3      4      5      6
  
     1      1      2      0      5      0     75
     2      0      1      0      0      0      0
     3      0      0      1      3      0      0
     4      0      0      0      1      0      6
     5      0      0      0      0      1      4
     6      0      0      0      0      0      1
  
  The inverse matrix:
  
            1      2      3      4      5      6
  
     1      1     -2      0     -5      0    -45
     2      0      1      0      0      0      0
     3      0      0      1     -3      0     18
     4      0      0      0      1      0     -6
     5      0      0      0      0      1     -4
     6      0      0      0      0      0      1
  
  The product:
  
            1      2      3      4      5      6
  
     1      1      0      0      0      0      0
     2      0      1      0      0      0      0
     3      0      0      1      0      0      0
     4      0      0      0      1      0      0
     5      0      0      0      0      1      0
     6      0      0      0      0      0      1
  
 TEST039
   IROW_MAX computes row maximums;
   IROW_MEAN computes row means;
   IROW_MIN computes row minimums;
   IROW_SUM computes row sums;
   IROW_SWAP swaps two rows;
   IROW_VARIANCE computes row variances;
  
  The matrix:
  
            1      2      3      4
  
     1      1      2      3      4
     2      5      6      7      8
     3      9     10     11     12
  
 Maximum, minimum, sum, mean, variance:
  
  1        4     1    10    2.5000    1.6667
  2        8     5    26    6.5000    1.6667
  3       12     9    42   10.5000    1.6667
  
 Swap rows 1 and 3:
  
  
  The new matrix:
  
            1      2      3      4
  
     1      9     10     11     12
     2      5      6      7      8
     3      1      2      3      4
  
 TEST040
   ISBN_CHECK checks ISBN's.
  
   A correct ISBN has a checksum of 0.
  
0-8493-9640-9             0
0-201-54275-7             0
0-521-35796-9             0
0-07-034025-0             0
0-7493-9640-9             2
0-201-54275-X             3
0-521-X5796-9            -1
0-37-034025-0             5
  
 TEST041
   ISBN_FILL can fill in a single missing digit
   in an ISBN.
  
0-?493-9640-9            0-8493-9640-9             0
0-201-5427?-7            0-201-54275-7             0
0-521-35796-?            0-521-35796-9             0
?-07-034025-0            0-07-034025-0             0
0-07-05?489-2            0-07-056489-2             0
  
 TEST042
   For an integer vector:
   IVEC_AMAX:      maximum absolute entry;
   IVEC_AMIN:      minimum absolute entry;
   IVEC_AMINZ:     minimum nonzero absolute entry;
   IVEC_CUM:       cumulative sum;
   IVEC_IMAX:      a maximal index;
   IVEC_IMAX_LAST: last maximal index;
   IVEC_INDEX:     first index of given value;
   IVEC_MAX:       maximum entry;
   IVEC_MEAN:      mean value;
   IVEC_MEDIAN:    median value;
   IVEC_MIN:       minimum entry;
   IVEC_NONZERO:   number of nonzeroes;
   IVEC_VARIANCE:  variance.
  
  
  Input vector:
  
     1   10
     2    5
     3  -10
     4   -1
     5    3
     6    9
     7    4
     8    5
     9    3
    10   -2
  
   Maximum:                            10
   Maximum index:                       1
   Last maximum index:                  1
   Minimum:                           -10
   Minimum index:                       3
   Maximum abs:                        10
   Maximum abs index:                   1
   Minimum abs:                         1
   Minimum abs index:                   4
   Minimum abs nonzero:                 1
   Minimum abs nonzero index:           4
  
   Index of first occurrence of            1  is            0
   Index of first occurrence of            2  is            0
  
   Sum of entries:                     26
   Mean:                        2.600000    
   Median:                              3
   Number of nonzeroes :               10
   Variance:                    33.60000    
  
  Cumulative sums:
  
     1    0
     2   10
     3   15
     4    5
     5    4
     6    7
     7   16
     8   20
     9   25
    10   28
    11   26
  
 TEST043
   IVEC_BRACKET finds a pair of entries in a
     sorted integer array which bracket a value.
   IVEC_INSERT inserts a value into a vector.
  
   We use these two routines to bracket a value,
   and then insert it.
  
  Sorted array:
  
     1    2
     2    4
     3    6
     4    8
     5   10
     6   10
     7   14
     8   16
     9   18
    10   20
  
 Search for AVAL =          -10
 Left =           -1
 Right =            1
 A(RIGHT) =            2
  
  Sorted, augmented array:
  
     1  -10
     2    2
     3    4
     4    6
     5    8
     6   10
     7   10
     8   14
     9   16
    10   18
    11   20
  
 Search for AVAL =            2
 Left =            2
 Right =            2
 A(LEFT)=           2
 A(RIGHT) =            2
  
 No insertion necessary.
  
 Search for AVAL =            9
 Left =            5
 Right =            6
 A(LEFT)=           8
 A(RIGHT) =           10
  
  Sorted, augmented array:
  
     1  -10
     2    2
     3    4
     4    6
     5    8
     6    9
     7   10
     8   10
     9   14
    10   16
    11   18
    12   20
  
 Search for AVAL =           10
 Left =            7
 Right =            7
 A(LEFT)=          10
 A(RIGHT) =           10
  
 No insertion necessary.
  
 Search for AVAL =           20
 Left =           12
 Right =           12
 A(LEFT)=          20
 A(RIGHT) =           20
  
 No insertion necessary.
  
 Search for AVAL =           24
 Left =           12
 Right =           -1
 A(LEFT)=          20
  
  Sorted, augmented array:
  
     1  -10
     2    2
     3    4
     4    6
     5    8
     6    9
     7   10
     8   10
     9   14
    10   16
    11   18
    12   20
    13   24
  
 TEST0435
   IVEC_DESCENDS determines if an integer vector descends.
  
  
  Test vector:
  
     1    1
     2    3
     3    2
     4    4
   IVEC_DESCENDS =  F
  
  Test vector:
  
     1    2
     2    2
     3    2
     4    2
   IVEC_DESCENDS =  T
  
  Test vector:
  
     1    1
     2    2
     3    2
     4    4
   IVEC_DESCENDS =  F
  
  Test vector:
  
     1    1
     2    2
     3    3
     4    4
   IVEC_DESCENDS =  F
  
  Test vector:
  
     1    4
     2    4
     3    3
     4    1
   IVEC_DESCENDS =  T
  
  Test vector:
  
     1    9
     2    7
     3    3
     4    0
   IVEC_DESCENDS =  T
  
 TEST044
   IVEC_FRAC: K-th smallest integer vector entry.
  
  
  The array to search:
  
     1    1
     2    4
     3   10
     4   11
     5   15
     6   14
     7    1
     8    6
     9   14
    10   12
  
   Fractile    Value
  
       1       1
       6      11
  
 TEST0445
   For an integer vector,
   IVEC_HEAP_A puts into ascending heap form.
   IVEC_HEAP_D puts into descending heap form.
  
  
  Unsorted array:
  
     1    6
     2    6
     3   10
     4    5
     5    2
     6    3
     7    5
     8    7
     9    8
    10    2
  
  Ascending heap form:
  
     1    2
     2    2
     3    3
     4    5
     5    6
     6   10
     7    5
     8    7
     9    8
    10    6
  
  Descending heap form:
  
     1   10
     2    8
     3    5
     4    7
     5    6
     6    3
     7    2
     8    2
     9    5
    10    6
  
 TEST045
   For a descending heap of integers,
   IVEC_HEAP_D_INSERT inserts a value into the heap.
   IVEC_HEAP_D_EXTRACT extracts the maximum value;
   IVEC_HEAP_D_MAX reports the maximum value.
  
   These 3 operations are enough to model a priority queue.
  
   Inserting value                     7
   Current maximum value is            7
  
   Inserting value                     0
   Current maximum value is            7
  
   Inserting value                     3
   Current maximum value is            7
  
   Inserting value                     4
   Current maximum value is            7
  
   Inserting value                     6
   Current maximum value is            7
  
   Inserting value                     2
   Current maximum value is            7
  
   Inserting value                     8
   Current maximum value is            8
  
   Inserting value                     9
   Current maximum value is            9
  
   Inserting value                     2
   Current maximum value is            9
  
   Inserting value                     1
   Current maximum value is            9
  
  Current heap as a vector:
  
     1    9
     2    8
     3    7
     4    6
     5    4
     6    2
     7    3
     8    0
     9    2
    10    1
  
   Now extract the maximum several times.
  
 Extracting maximum element =            9
 Extracting maximum element =            8
 Extracting maximum element =            7
 Extracting maximum element =            6
 Extracting maximum element =            4
  
  Current heap as a vector:
  
     1    3
     2    2
     3    2
     4    1
     5    0
  
 TEST0451
   IVEC_INDEX_INSERT_UNIQUE inserts unique values into an
     index sorted array.
   IVEC_INDEX_SEARCH searches for an entry with a given value.
  
   Generate some random values:
  
  
   Indexed list of entries:
  
  I  INDX(I)  X(I)  X(INDX(I))
  
  1        1     0           0
  2        6    14           1
  3        5     7           6
  4        3    13           7
  5        7     6          11
  6        4     1          13
  7        2    11          14
  8        8    15          15
  9       11    20          16
 10       10    19          19
 11        9    16          20
  
   Results of search for given XVAL:
  
XVAL  Less Equal More
  
  0     0     1     2
  1     1     2     3
  2     2     0     3
  3     2     0     3
  4     2     0     3
  5     2     0     3
  6     2     3     4
  7     3     4     5
  8     4     0     5
  9     4     0     5
 10     4     0     5
 11     4     5     6
 12     5     0     6
 13     5     6     7
 14     6     7     8
 15     7     8     9
 16     8     9    10
 17     9     0    10
 18     9     0    10
 19     9    10    11
 20    10    11    12
  
 TEST0452
   IVEC_INDEX_INSERT inserts values into an
     index sorted array of integers.
   IVEC_INDEX_DELETE_ALL deletes all copies of a
     particular value.
   IVEC_INDEX_DELETE_ONE deletes one copies of a
     particular value.
   IVEC_INDEX_DELETE_DUPES deletes duplicates.
  
   Generate some random values:
  
      6
      6
     16
      2
     17
     10
      5
      0
      9
     13
      8
     13
     18
     10
     16
     18
      7
      1
      5
      3
  
   Indexed list of entries:
  
  I  INDX(I)  X(I)  X(INDX(I))
  
  1       10     8           0
  2       20     7           1
  3        6     6           2
  4       22     6           3
  5        9    16           5
  6       21     2           5
  7        3    17           6
  8        4    10           6
  9        2     5           7
 10       23     0           7
 11       19     9           7
 12        1    13           8
 13       24     8           8
 14       13    13           8
 15       11    18           9
 16        8    10          10
 17       16    16          10
 18       12    18          13
 19       14     7          13
 20        5     1          16
 21       17     5          16
 22        7     3          17
 23       15     7          18
 24       18     8          18
  
   Call IVEC_INDEX_DELETE_ONE to delete one value equal to 8:
  
   Call IVEC_INDEX_DELETE_ALL to delete all values equal to 7:
  
   Indexed list of entries:
  
  I  INDX(I)  X(I)  X(INDX(I))
  
  1        8     6           0
  2       17     6           1
  3        4    16           2
  4       19     2           3
  5        7    17           5
  6       18    10           5
  7        1     5           6
  8        2     0           6
  9       20     9           8
 10       11    13           8
 11        9     8           9
 12        6    13          10
 13       14    18          10
 14       10    10          13
 15       12    16          13
 16        3    18          16
 17       15     1          16
 18        5     5          17
 19       13     3          18
 20       16     8          18
  
   Call IVEC_INDEX_DELETE_DUPES to delete duplicates:
  
   Indexed list of unique entries:
  
  I  INDX(I)  X(I)
  
  1        1     0
  2        2     1
  3        3     2
  4        4     3
  5        5     5
  6        6     6
  7        7     8
  8        8     9
  9        9    10
 10       10    13
 11       11    16
 12       12    17
 13       13    18
  
 TEST0453
   IVEC_INDEX_INSERT_UNIQUE inserts unique values into an
     index sorted array.
   IVEC_INDEX_ORDER sorts an index sorted array.
  
   Generate some random values:
  
      0
      3
      1
     13
      4
      5
     13
     19
     17
     11
      4
      3
      6
     20
     15
     15
      9
      7
      2
     17
  
   Indexed list of unique entries:
  
  I  INDX(I)  X(I)  X(INDX(I))
  
  1        1     0           0
  2        3     3           1
  3       15     1           2
  4        2    13           3
  5        5     4           4
  6        6     5           5
  7       10    19           6
  8       14    17           7
  9       13    11           9
 10        9     6          11
 11        4    20          13
 12       12    15          15
 13        8     9          17
 14        7     7          19
 15       11     2          20
  
   Now call IVEC_INDEX_ORDER to carry out the sorting:
  
  I  X(I)
  
  1        0
  2        1
  3        2
  4        3
  5        4
  6        5
  7        6
  8        7
  9        9
 10       11
 11       13
 12       15
 13       17
 14       19
 15       20
  
 TEST046
   For ascending order:
   IVEC_MERGE_A merges two sorted integer arrays;
   IVEC_SEARCH_BINARY_A searchs an array for a value;
   IVEC_SORT_HEAP_A sorts an integer array.
  
  
  Input vector A:
  
     1    1
     2    2
     3    5
     4    5
     5    6
     6    6
     7    7
     8    7
     9    9
    10    9
  
  Input vector B:
  
     1    0
     2    0
     3    3
     4    3
     5    4
     6    4
     7    6
     8    7
     9    8
    10   10
  
  Merged vector C:
  
     1    0
     2    1
     3    2
     4    3
     5    4
     6    5
     7    6
     8    7
     9    8
    10    9
    11   10
  
   Search the array C for the value            5
  
   SEARCH RESULT:
     The value occurs in index            6
  
 TEST047
   IVEC_ORDER_TYPE classifies an integer vector as
   -1: no order
    0: all equal;
    1: ascending;
    2: strictly ascending;
    3: descending;
    4: strictly descending.
  
  
 The following vector has order type           -1
  
       1       1
       2       3
       3       2
       4       4
  
 The following vector has order type            0
  
       1       2
       2       2
       3       2
       4       2
  
 The following vector has order type            1
  
       1       1
       2       2
       3       2
       4       4
  
 The following vector has order type            2
  
       1       1
       2       2
       3       3
       4       4
  
 The following vector has order type            3
  
       1       4
       2       4
       3       3
       4       1
  
 The following vector has order type            4
  
       1       9
       2       7
       3       3
       4       0
  
 TEST0475
   IVEC_PAIRWISE_PRIME determines if a vector of
   integers is pairwise prime.
  
              Pairwise
 Row Vector     Prime?
  
  1  3  2  4   F
  2  2  2  2   F
  5  7 12 29   T
  1 13  1 11   T
  1  4  9 16   F
  6 35 13 77   F
  
 TEST048
   IVEC_PART partitions an integer.
  
   NVAL =           17
  
  Partitioned:
  
     1    4
     2    4
     3    3
     4    3
     5    3
  
   NVAL =          -49
  
  Partitioned:
  
     1  -10
     2  -10
     3  -10
     4  -10
     5   -9
  
 TEST049
   IVEC_PART_QUICK_A reorders an integer vector
     as part of a quick sort.
  
  Before rearrangment:
  
     1    2
     2    9
     3    8
     4    7
     5    1
     6    4
     7    9
     8    7
     9    0
    10    4
    11    3
    12    6
  
   Rearranged array
   Left =            2
   Right =            4
  
       1       0
       2       1
  
       3       2
       4       7
       5       4
       6       9
       7       7
       8       8
       9       4
      10       3
      11       6
      12       9
  
 TEST050
   IVEC_REVERSE reverses a list of integers.
  
  
  Original vector:
  
     1   25
     2   28
     3    7
     4   27
     5   14
     6    5
     7   10
     8    9
     9    4
    10    9
  
  Reversed:
  
     1    9
     2    4
     3    9
     4   10
     5    5
     6   14
     7   27
     8    7
     9   28
    10   25
  
 TEST051
   For a vector of integers,
   IVEC_SORT_HEAP_A ascending sorts,
   IVEC_SORT_HEAP_D descending sorts.
  
  
  Unsorted:
  
     1   56
     2   34
     3   49
     4   20
     5   10
     6    2
     7   20
     8    7
     9   24
    10    0
    11   49
    12   18
    13   36
    14   32
    15   56
    16    6
    17   46
    18    6
    19   36
    20   14
  
  Ascending sort:
  
     1    0
     2    2
     3    6
     4    6
     5    7
     6   10
     7   14
     8   18
     9   20
    10   20
    11   24
    12   32
    13   34
    14   36
    15   36
    16   46
    17   49
    18   49
    19   56
    20   56
  
  Descending sort:
  
     1   56
     2   56
     3   49
     4   49
     5   46
     6   36
     7   36
     8   34
     9   32
    10   24
    11   20
    12   20
    13   18
    14   14
    15   10
    16    7
    17    6
    18    6
    19    2
    20    0
  
 TEST052
   IVEC_SORT_HEAP_A sorts an integer array;
   IVEC_UNIQ finds unique entries.
  
  
  Input vector:
  
     1    0
     2    0
     3    1
     4    2
     5    3
     6    4
     7    5
     8    5
     9    6
    10    6
    11    6
    12    7
    13   11
    14   12
    15   14
    16   16
    17   17
    18   18
    19   19
    20   19
  
  Unique entries:
  
     1    0
     2    1
     3    2
     4    3
     5    4
     6    5
     7    6
     8    7
     9   11
    10   12
    11   14
    12   16
    13   17
    14   18
    15   19
  
 TEST053
   IVEC_SORT_HEAP_INDEX_A creates an ascending
     sort index for an integer array.
   IVEC_SORT_HEAP_INDEX_D creates a descending
     sort index for an integer array.
  
  Unsorted array:
  
     1   58
     2    4
     3   39
     4   27
     5   33
     6   40
     7   10
     8   51
     9   31
    10   25
    11   11
    12   40
    13   12
    14   14
    15   60
    16   37
    17    0
    18   52
    19   46
    20   14
  
   After indexed ascending sort:
  
   I, INDX(I), A(I)
  
       1      17      58
       2       2       4
       3       7      39
       4      11      27
       5      13      33
       6      14      40
       7      20      10
       8      10      51
       9       4      31
      10       9      25
      11       5      11
      12      16      40
      13       3      12
      14      12      14
      15       6      60
      16      19      37
      17       8       0
      18      18      52
      19       1      46
      20      15      14
  
   Now use the index array to carry out the
   permutation implicitly.
  
   I, INDX(I), A(INDX(I))
  
       1      17       0
       2       2       4
       3       7      10
       4      11      11
       5      13      12
       6      14      14
       7      20      14
       8      10      25
       9       4      27
      10       9      31
      11       5      33
      12      16      37
      13       3      39
      14      12      40
      15       6      40
      16      19      46
      17       8      51
      18      18      52
      19       1      58
      20      15      60
  
   Call IVEC_PERMUTE to carry out the permutation
   explicitly.
  
  
  I, A(I)
  
     1    0
     2    4
     3   10
     4   11
     5   12
     6   14
     7   14
     8   25
     9   27
    10   31
    11   33
    12   37
    13   39
    14   40
    15   40
    16   46
    17   51
    18   52
    19   58
    20   60
  
   After indexed descending sort:
  
   I, INDX(I), A(I)
  
       1      20       0
       2      19       4
       3      18      10
       4      17      11
       5      16      12
       6      14      14
       7      15      14
       8      13      25
       9      12      27
      10      11      31
      11      10      33
      12       9      37
      13       8      39
      14       7      40
      15       6      40
      16       5      46
      17       4      51
      18       3      52
      19       2      58
      20       1      60
  
   Now use the index array to carry out the
   permutation implicitly.
  
   INDX(I), A(INDX(I))
  
       1      20      60
       2      19      58
       3      18      52
       4      17      51
       5      16      46
       6      14      40
       7      15      40
       8      13      39
       9      12      37
      10      11      33
      11      10      31
      12       9      27
      13       8      25
      14       7      14
      15       6      14
      16       5      12
      17       4      11
      18       3      10
      19       2       4
      20       1       0
  
 TEST054
   IVEC_SORT_INSERT_A sorts an integer array.
  
  
  Unsorted array:
  
     1    5
     2    9
     3    6
     4    5
     5    2
     6    3
     7    0
     8   10
     9    0
    10    7
  
  Sorted array:
  
     1    0
     2    0
     3    2
     4    3
     5    5
     6    5
     7    6
     8    7
     9    9
    10   10
  
 TEST055
   IVEC_SORT_QUICK_A sorts an integer vector
     using quick sort.
  
  
  Unsorted array:
  
     1   46
     2   33
     3   32
     4   44
     5    5
     6    5
     7   38
     8   28
     9   47
    10    2
    11   56
    12   20
    13   10
    14   60
    15   25
    16    3
    17   12
    18   51
    19   18
    20   59
  
  Sorted array:
  
     1    2
     2    3
     3    5
     4    5
     5   10
     6   12
     7   18
     8   20
     9   25
    10   28
    11   32
    12   33
    13   38
    14   44
    15   46
    16   47
    17   51
    18   56
    19   59
    20   60
  
 TEST056
   IVEC_SORT_SHELL_A sorts an integer vector
     using Shell's sort.
  
  
  Unsorted array:
  
     1   26
     2    2
     3   56
     4   20
     5   56
     6   20
     7   40
     8   12
     9   33
    10   10
    11    1
    12   11
    13   21
    14   35
    15   44
    16   51
    17   31
    18   19
    19   25
    20   14
  
  Sorted array:
  
     1    1
     2    2
     3   10
     4   11
     5   12
     6   14
     7   19
     8   20
     9   20
    10   21
    11   25
    12   26
    13   31
    14   33
    15   35
    16   40
    17   44
    18   51
    19   56
    20   56
  
 TEST057
   IVEC_VALUE_INDEX indexes entries equal to
   a given value.
  
   The desired value is            3
   Maximum number of indices to find is            3
  
  Input vector A:
  
     1    3
     2    1
     3    1
     4    5
     5    3
     6    5
     7    3
     8    4
     9    1
    10    2
    11    4
    12    1
    13    5
    14    2
    15    5
    16    5
    17    4
    18    4
    19    2
    20    5
    21    1
    22    3
    23    5
    24    3
    25    2
  
  Indices of entries equal to given value:
  
     1    1
     2    5
     3    7
  
 TEST058
   For a pair of integer vectors:
   IVEC2_SORT_A ascending sorts;
   IVEC2_SORT_D descending sorts;
   IVEC2_UNIQ counts unique entries.
  
  
  The array:
  
     1         3         3
     2         3         3
     3         3         3
     4         2         1
     5         3         3
     6         3         1
     7         1         3
     8         2         2
     9         3         3
    10         1         2
  
  After ascending sort:
  
     1         1         2
     2         1         3
     3         2         1
     4         2         2
     5         3         1
     6         3         3
     7         3         3
     8         3         3
     9         3         3
    10         3         3
  
  After descending sort:
  
     1         3         3
     2         3         3
     3         3         3
     4         3         3
     5         3         3
     6         3         1
     7         2         2
     8         2         1
     9         1         3
    10         1         2
  
  After UNIQ:
  
     1         3         3
     2         3         1
     3         2         2
     4         2         1
     5         1         3
     6         1         2
  
 TEST059
   NORMAL_01_SAMPLE generates normally distributed
     random values.
  
  
  0.568202E-01
  0.130698    
 -0.558818    
  0.439739    
  -1.59671    
   1.33406    
 -0.358461    
 -0.758548    
 -0.664171    
  -1.20928    
  0.222384    
  0.691336    
   1.60768    
  0.299735    
 -0.214510    
   2.43691    
 -0.824657    
  0.568499    
  -2.66731    
  0.448223    
  
 TEST0595
   Given a point in 2D, we want to find its nearest
   neighbor among points in a set.
  
   POINTS_NEAREST_POINT_NAIVE_2D uses a naive algorithm.
   POINTS_NEAREST_POINT_BINS_2D uses bins.
  
   The number of points in the pointset is         1000
   The number of bins used in each direction is           20
  
   The X coordinate range:   0.0000000E+00   10.00000    
   The Y coordinate range:   0.0000000E+00   10.00000    
  
   Test point X range:       0.0000000E+00   10.00000    
   Test point Y range:       0.0000000E+00   10.00000    
  
     Test point           Neighbor point      Distance
 --------------------  --------------------  ----------
  
  
    6.6800    0.5848      6.4576    0.6846      0.2438
    6.6800    0.5848      6.4576    0.6846      0.2438    20
  
    7.9311    8.1558      8.0648    8.2914      0.1904
    7.9311    8.1558      8.0648    8.2914      0.1904    28
  
    5.3646    2.6973      5.4464    2.4697      0.2419
    5.3646    2.6973      5.4464    2.4697      0.2419    21
  
    4.0347    0.4988      3.8430    0.6856      0.2676
    4.0347    0.4988      3.8430    0.6856      0.2676    14
  
    3.9284    4.8621      3.8366    4.8745      0.0926
    3.9284    4.8621      3.8366    4.8745      0.0926    18
  
    6.5141    1.8368      6.4270    1.6676      0.1903
    6.5141    1.8368      6.4270    1.6676      0.1903    23
  
    1.4494    9.6172      1.4473    9.8123      0.1951
    1.4494    9.6172      1.4473    9.8123      0.1951    13
  
    6.4227    6.0492      6.6565    5.8977      0.2786
    6.4227    6.0492      6.6565    5.8977      0.2786    14
  
    9.0145    6.0098      9.2529    5.8715      0.2756
    9.0145    6.0098      9.2529    5.8715      0.2756    19
  
    7.3425    5.7721      7.4242    5.7098      0.1027
    7.3425    5.7721      7.4242    5.7098      0.1027     2
  
 TEST0596
   Given a point set in 2D, and a set of test points,
   for each testpoint, find the nearest neighbor in
   the point set.
  
   POINTS_NEAREST_POINTS_NAIVE_2D uses a naive algorithm.
   POINTS_NEAREST_POINTS_BINS_2D uses bins.
   POINTS_NEAREST_POINTS_BINS2_2D uses bins.
   POINTS_NEAREST_POINTS_BINS3_2D uses bins.
  
   The number of points in the pointset is         1000
   The number of bins used in each direction is           20
   The number of points in the test set is          100
  
   The X coordinate range:   0.0000000E+00   10.00000    
   The Y coordinate range:   0.0000000E+00   10.00000    
  
  
   Print results for up to first 10 points...
  
     Test point                  Distance
                        Naive     Bins     Bins2     Bins3
 --------------------  ------------------------------------
  
  
    8.8405    7.8734        0.1109    0.1109    0.1109    0.1109
    2.3724    7.6633        0.1203    0.1203    0.1203    0.1203
    2.8823    6.8599        0.0925    0.0925    0.0925    0.0925
    3.0480    3.9337        0.0517    0.0517    0.0517    0.0517
    8.2166    3.0043        0.0449    0.0449    0.0449    0.0449
    7.2064    2.7071        0.2946    0.2946    0.2946    0.2946
    7.2069    7.6525        0.0700    0.0700    0.0700    0.0700
    7.0975    5.5516        0.2529    0.2529    0.2529    0.2529
    7.9773    6.1261        0.1512    0.1512    0.1512    0.1512
    4.2032    0.7605        0.0538    0.0538    0.0538    0.0538
  
   Naive and bin1 codes computed the same results.
  
   Naive and bin2 codes computed the same results.
  
   Naive and bin3 codes computed the same results.
  
   Naive code time =   5.7500001E-02
   Bin code time =     2.0000001E-03
   Bin2 code time =     2.9000000E-03
   Bin3 code time =     2.9000000E-03
  
 TEST05965
   Given a point set in 2D, and a set of test points,
   for each testpoint, find the nearest neighbor in
   the point set.
  
   In this test, the region is RECTANGULAR.
   The BINS and BINS2 codes will end up using rectangular bins;
   We will set the BINS3 code to use the same number of bins,
   but they will be square.  This should mean that BINS3
   finds a match faster.
  
   POINTS_NEAREST_POINTS_NAIVE_2D uses a naive algorithm.
   POINTS_NEAREST_POINTS_BINS_2D uses bins.
   POINTS_NEAREST_POINTS_BINS2_2D uses bins.
   POINTS_NEAREST_POINTS_BINS3_2D uses bins.
  
   The number of points in the pointset is         1000
   The number of bins used in each direction is           10
   The number of points in the test set is          100
  
   The X coordinate range:   0.0000000E+00   4.000000    
   The Y coordinate range:   0.0000000E+00   25.00000    
  
  
   Print results for up to first 10 points...
  
     Test point                  Distance
                        Naive     Bins     Bins2     Bins3
 --------------------  ------------------------------------
  
  
    2.1251    5.4837        0.0853    0.0853    0.0853    0.0853
    1.2910   13.7850        0.1939    0.1939    0.1939    0.1939
    1.0674    9.1728        0.2332    0.2332    0.2332    0.2332
    0.0488   16.5419        0.4571    0.4571    0.4571    0.4571
    3.8512   20.0908        0.2349    0.2349    0.2349    0.2349
    2.3662   16.1176        0.3209    0.3209    0.3209    0.3209
    0.4144   13.9477        0.3000    0.3000    0.3000    0.3000
    1.3966   19.1175        0.1940    0.1940    0.1940    0.1940
    1.2998    7.0299        0.1994    0.1994    0.1994    0.1994
    1.1846    1.7254        0.2913    0.2913    0.2913    0.2913
  
   Naive and bin1 codes computed the same results.
  
   Naive and bin2 codes computed the same results.
  
   Naive and bin3 codes computed the same results.
  
   Naive code time =   5.6600001E-02
   Bin code time =     5.7999999E-03
   Bin2 code time =     4.9000001E-03
   Bin3 code time =     3.8999999E-03
  
 TEST0597
   Given a point set in 3D, and a set of test points,
   for each testpoint, find the nearest neighbor in
   the point set.
  
   POINTS_NEAREST_POINTS_NAIVE_3D uses a naive algorithm.
   POINTS_NEAREST_POINTS_BINS2_3D uses bins.
  
   The number of points in the pointset is         4096
   The number of bins used in each direction is           32
   The number of points in the test set is         1000
  
   The X coordinate range:   0.0000000E+00   10.00000    
   The Y coordinate range:   0.0000000E+00   10.00000    
   The Z coordinate range:   0.0000000E+00   10.00000    
  
  
   Print up to the first 10 points.
  
     Test point                       Distance        Comparisons
                                  Naive     Bins     Naive Bins
 -----------------------------  --------------------  ----------
  
  
    0.7682    5.3236    8.9477    0.3914    0.3914    4096    13
    0.7124    4.4203    4.3551    0.3985    0.3985    4096    18
    2.7769    1.6091    6.1748    0.4711    0.4711    4096    14
    0.9478    4.7432    0.6810    0.4151    0.4151    4096    12
    9.8760    9.4356    6.1874    0.6270    0.6270    4096     3
    6.7024    4.5615    1.0950    0.5803    0.5803    4096    10
    7.9969    4.3447    3.8214    0.2934    0.2934    4096     6
    4.4194    1.1579    6.6396    0.3031    0.3031    4096     3
    6.9489    0.8398    1.8672    0.2798    0.2798    4096     2
    9.4739    4.8379    2.3369    0.1603    0.1603    4096     8
  
   Naive and bin codes computed the same results.
  
   Naive code time =    5.806800    
   Bin code time =     0.1757000    
  
 TEST060
   R_DIFF computes a difference X-Y to a given
     number of binary places.
  
   For this test, we use            3  binary places.
  
        X       Y       X-Y     R_DIFF(X,Y)
  
    1.0000    0.0625    0.9375    0.8750
    1.0000    0.1250    0.8750    0.8750
    1.0000    0.2500    0.7500    0.7500
    1.0000    0.5000    0.5000    0.5000
    1.0000    0.8740    0.1260    0.1250
    1.0000    0.8760    0.1240    0.1250
    1.0000    0.9000    0.1000    0.1250
    1.0000    0.9500    0.0500    0.0000
    1.0000    0.9900    0.0100    0.0000
    1.0000    1.0000    0.0000    0.0000
    1.0000    1.0100   -0.0100    0.0000
    1.0000    1.0500   -0.0500    0.0000
    1.0000    1.1000   -0.1000   -0.1375
    1.0000    3.0000   -2.0000   -1.8750
    1.0000   10.0000   -9.0000   -8.7500
  
 TEST061
   R_DIGIT extracts decimal digits.
  
   Here, we get digits of    3.141593    
  
 -2 -1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
  0  0  0  3  1  4  1  5  9  2  7  4  1  0  1  2  5  7
  
 TEST0615
   R_INF returns real infinity;
  
   TEST CANCELLED!
   I GET A FLOATING-DIVIDE-BY-ZERO ERROR.
  
  
 TEST062
   R_NAN returns real NaN.
  
   TEST CANCELLED!
   I GET A FLOATING-DIVIDE-BY-ZERO ERROR.
  
  
 TEST063
   R_MANT decomposes a real value.
  
   Number to be decomposed:
  -314.1590    
  
   R_MANT: X =           -1  *    1.227184      * 2**           8
  
 TEST0635
   R_POWER computes R**P, economizing on
     multiplications.
  
       R          P       R**P       Mults
  
   2.00000      -10  0.976563E-03    7
   2.00000       -9  0.195313E-02    7
   2.00000       -8  0.390625E-02    6
   2.00000       -7  0.781250E-02    7
   2.00000       -6  0.156250E-01    6
   2.00000       -5  0.312500E-01    6
   2.00000       -4  0.625000E-01    5
   2.00000       -3  0.125000        5
   2.00000       -2  0.250000        4
   2.00000       -1  0.500000        1
   2.00000        0   1.00000        0
   2.00000        1   2.00000        0
   2.00000        2   4.00000        3
   2.00000        3   8.00000        4
   2.00000        4   16.0000        4
   2.00000        5   32.0000        5
   2.00000        6   64.0000        5
   2.00000        7   128.000        6
   2.00000        8   256.000        5
   2.00000        9   512.000        6
   2.00000       10   1024.00        6
   2.00000       11   2048.00        7
   2.00000       12   4096.00        6
   2.00000       13   8192.00        7
   2.00000       14   16384.0        7
   2.00000       15   32768.0        8
   2.00000       16   65536.0        6
   2.00000       17   131072.        7
   2.00000       18   262144.        7
   2.00000       19   524288.        8
   2.00000       20  0.104858E+07    7
   2.00000       21  0.209715E+07    8
   2.00000       22  0.419430E+07    8
   2.00000       23  0.838861E+07    9
   2.00000       24  0.167772E+08    7
   2.00000       25  0.335544E+08    8
   2.00000       26  0.671089E+08    8
   2.00000       27  0.134218E+09    9
   2.00000       28  0.268435E+09    8
   2.00000       29  0.536871E+09    9
   2.00000       30  0.107374E+10    9
   2.00000       31  0.214748E+10   10
   2.00000       32  0.429497E+10    7
   2.00000       33  0.858993E+10    8
   2.00000       34  0.171799E+11    8
   2.00000       35  0.343597E+11    9
   2.00000       36  0.687195E+11    8
   2.00000       37  0.137439E+12    9
   2.00000       38  0.274878E+12    9
   2.00000       39  0.549756E+12   10
   2.00000       40  0.109951E+13    8
  
 TEST064
   R_ROUND2 rounds a real number to a
     specified number of base 2 digits.
  
   Test effect on PI:
   X =    3.141593    
  
   NPLACE  XROUND
  
       0   0.00000    
       1   2.00000    
       2   3.00000    
       3   3.00000    
       4   3.00000    
       5   3.12500    
       6   3.12500    
       7   3.12500    
       8   3.14063    
       9   3.14063    
      10   3.14063    
      11   3.14063    
      12   3.14063    
      13   3.14111    
      14   3.14136    
      15   3.14148    
      16   3.14154    
      17   3.14157    
      18   3.14159    
      19   3.14159    
      20   3.14159    
  
 TEST065
   R_ROUNDB rounds a real number to a 
     specified number of base IBASE digits.
  
   Here, we will use IBASE =            3
  
   Test effect on PI:
   X =    3.141593    
  
   NPLACE  XROUND
  
       0   0.00000    
       1   3.00000    
       2   3.00000    
       3   3.00000    
       4   3.11111    
       5   3.11111    
       6   3.13580    
       7   3.13992    
       8   3.14129    
       9   3.14129    
      10   3.14144    
      11   3.14154    
      12   3.14158    
      13   3.14159    
      14   3.14159    
      15   3.14159    
      16   3.14159    
      17   3.14159    
      18   3.14159    
      19   3.14159    
      20   3.14159    
  
   Try with a negative base:
  
   Input quantity is X =    121.0000    
   to be rounded in base           -3
  
   Output value to            1  places is    81.00000    
  
   Output value to            2  places is    108.0000    
  
   Output value to            3  places is    117.0000    
  
   Output value to            4  places is    120.0000    
  
   Output value to            5  places is    120.0000    
  
 TEST066
   R_ROUNDX rounds a real number to a 
     specified number of decimal digits.
  
   Test effect on PI:
   X =    3.141593    
  
   NPLACE  XROUND
  
       0   0.0000000    
       1   3.0000000    
       2   3.1000001    
       3   3.1399999    
       4   3.1410000    
       5   3.1415000    
       6   3.1415899    
       7   3.1415920    
       8   3.1415927    
       9   3.1415930    
      10   3.1415930    
  
 TEST067
   R_SIGN returns the sign of a number.
  
 -1.2500 -1.0000
 -0.2500 -1.0000
  0.0000  0.0000
  0.5000  1.0000
  9.0000  1.0000
  
 TEST0675
   R_TO_BIN_EVEN puts a number into a bin.
   BIN_TO_R_EVEN returns the bin limits.
   The bins are equally spaced between A and B,
   with two extra bins, for things less than A,
   or greater than B.
  
   A =    10.00000    
   B =    20.00000    
   Total number of bins =            7
  
   Generate some random values C and put them in bins.
  
        C      Bin   Bin_Min  Bin_Max
  
   18.0337       6   18.0000       20.0000    
   13.8425       3   12.0000       14.0000    
   13.6562       3   12.0000       14.0000    
   16.2140       5   16.0000       18.0000    
   15.9197       4   14.0000       16.0000    
   20.2174       7   20.0000      0.340282E+39
   11.5971       2   10.0000       12.0000    
   14.9948       4   14.0000       16.0000    
   14.2029       4   14.0000       16.0000    
   10.0973       2   10.0000       12.0000    
   22.3566       7   20.0000      0.340282E+39
   9.53397       1 -0.340282E+39   10.0000    
   19.3952       6   18.0000       20.0000    
   22.8864       7   20.0000      0.340282E+39
   19.1322       6   18.0000       20.0000    
   12.2156       3   12.0000       14.0000    
   14.4795       4   14.0000       16.0000    
   9.53835       1 -0.340282E+39   10.0000    
   17.9755       5   16.0000       18.0000    
   10.9247       2   10.0000       12.0000    
   8.01726       1 -0.340282E+39   10.0000    
   13.1229       3   12.0000       14.0000    
   8.28344       1 -0.340282E+39   10.0000    
   16.8453       5   16.0000       18.0000    
   21.6984       7   20.0000      0.340282E+39
   16.8695       5   16.0000       18.0000    
   22.5204       7   20.0000      0.340282E+39
   18.1595       6   18.0000       20.0000    
   13.7451       3   12.0000       14.0000    
   11.4207       2   10.0000       12.0000    
  
 TEST0676
   R_TO_BIN_EVEN2 puts a number into a bin.
   BIN_TO_R_EVEN2 returns the bin limits.
   The bins are equally spaced between A and B.
  
   A =    10.00000    
   B =    20.00000    
   Total number of bins =            5
  
   Generate some random values C and put them in bins.
  
        C      Bin   Bin_Min  Bin_Max
  
   18.8771       5   18.0000       20.0000    
   14.3324       3   14.0000       16.0000    
   11.3592       1   10.0000       12.0000    
   21.9032       5   18.0000       20.0000    
   8.37148       1   10.0000       12.0000    
   11.5342       1   10.0000       12.0000    
   21.7909       5   18.0000       20.0000    
   11.9758       1   10.0000       12.0000    
   19.1470       5   18.0000       20.0000    
   20.5002       5   18.0000       20.0000    
   9.39743       1   10.0000       12.0000    
   19.6743       5   18.0000       20.0000    
   17.5054       4   16.0000       18.0000    
   15.0326       3   14.0000       16.0000    
   19.4246       5   18.0000       20.0000    
   21.9378       5   18.0000       20.0000    
   20.6308       5   18.0000       20.0000    
   14.1432       3   14.0000       16.0000    
   11.6189       1   10.0000       12.0000    
   20.8785       5   18.0000       20.0000    
   22.2408       5   18.0000       20.0000    
   13.3606       2   12.0000       14.0000    
   13.3553       2   12.0000       14.0000    
   14.4789       3   14.0000       16.0000    
   13.7260       2   12.0000       14.0000    
   19.5750       5   18.0000       20.0000    
   14.5039       3   14.0000       16.0000    
   14.1005       3   14.0000       16.0000    
   14.2014       3   14.0000       16.0000    
   14.5988       3   14.0000       16.0000    
  
 TEST0677
   R2_TO_BIN_EVEN puts an R2 number into a bin.
   BIN_TO_R2_EVEN returns the bin limits.
   The bins are equally spaced between A and B,
   with two extra bins, for things less than A,
   or greater than B.
  
   A(1) =    5.000000    
   B(1) =    15.00000    
   A(2) =   0.0000000E+00
   B(2) =    20.00000    
   Total number of bins =            7
  
   Generate some random values C and put them in bins.
   We list the X and Y components on separate lines.
  
        C      Bin   Bin_Min  Bin_Max
  
  
   16.7289       7   15.0000      0.340282E+39
  0.646681       2   0.00000       4.00000    
  
   3.67458       1 -0.340282E+39   5.00000    
   18.3073       6   16.0000       20.0000    
  
   10.3792       4   9.00000       11.0000    
  0.215097       2   0.00000       4.00000    
  
   16.1547       7   15.0000      0.340282E+39
   10.9862       4   8.00000       12.0000    
  
   12.9730       5   11.0000       13.0000    
   15.8651       5   12.0000       16.0000    
  
   17.5261       7   15.0000      0.340282E+39
  -1.85236       1 -0.340282E+39   0.00000    
  
   20.7469       7   15.0000      0.340282E+39
   12.1596       5   12.0000       16.0000    
  
   22.4367       7   15.0000      0.340282E+39
   11.8639       4   8.00000       12.0000    
  
   21.1318       7   15.0000      0.340282E+39
  -1.28413       1 -0.340282E+39   0.00000    
  
   5.30670       2   5.00000       7.00000    
   8.10664       4   8.00000       12.0000    
  
   9.36939       4   9.00000       11.0000    
   9.89967       4   8.00000       12.0000    
  
   14.1284       6   13.0000       15.0000    
   16.0763       6   16.0000       20.0000    
  
   3.80833       1 -0.340282E+39   5.00000    
   4.38041       3   4.00000       8.00000    
  
   11.2589       5   11.0000       13.0000    
   6.57316       3   4.00000       8.00000    
  
   17.8728       7   15.0000      0.340282E+39
   5.55147       3   4.00000       8.00000    
  
   6.09093       2   5.00000       7.00000    
   8.65257       4   8.00000       12.0000    
  
   7.92772       3   7.00000       9.00000    
  -1.73913       1 -0.340282E+39   0.00000    
  
   15.6252       7   15.0000      0.340282E+39
   11.0402       4   8.00000       12.0000    
  
   22.4337       7   15.0000      0.340282E+39
  0.468667       2   0.00000       4.00000    
  
   22.0260       7   15.0000      0.340282E+39
   9.92637       4   8.00000       12.0000    
  
   4.24243       1 -0.340282E+39   5.00000    
 -0.320929       1 -0.340282E+39   0.00000    
  
   22.2590       7   15.0000      0.340282E+39
   4.77241       3   4.00000       8.00000    
  
   20.2517       7   15.0000      0.340282E+39
   8.29543       4   8.00000       12.0000    
  
   8.51705       3   7.00000       9.00000    
   3.89948       2   0.00000       4.00000    
  
   22.6659       7   15.0000      0.340282E+39
   3.54697       2   0.00000       4.00000    
  
   10.8325       4   9.00000       11.0000    
  -1.25183       1 -0.340282E+39   0.00000    
  
   17.3640       7   15.0000      0.340282E+39
   16.6505       6   16.0000       20.0000    
  
   16.4403       7   15.0000      0.340282E+39
   10.5967       4   8.00000       12.0000    
  
   21.3397       7   15.0000      0.340282E+39
   15.1700       5   12.0000       16.0000    
  
   19.1115       7   15.0000      0.340282E+39
   5.26298       3   4.00000       8.00000    
  
 TEST068
   R2_CHEBY computes the Chebyshev abscissas
     for a given interval [R1,R2].
  
R1:     -1.00000    
     1 -0.951056    
     2 -0.587785    
     3  0.298023E-07
     4  0.587785    
     5  0.951056    
R2:      1.00000    
  
R1:      0.00000    
     1  0.125360    
     2   1.09084    
     3   2.83058    
     4   5.00000    
     5   7.16942    
     6   8.90916    
     7   9.87464    
R2:      10.0000    
  
 TEST1007
   R2VEC_BIN_EVEN constructs evenly spaced bins and
     assigns each element of a real array to a bin.
   R2VEC_BINNED_REORDER can reorder the array
     to correspond to the bin ordering.
   R2VEC_BINNED_SORT_A can sort the individual bins
     after the array has been reordered.
  
   The bins are equally spaced between BIN_MIN and BIN_MAX,
   with two extra bins, for things less than BIN_MIN,
   or greater than BIN_MAX.
  
   Component 1 range:    10.00000       20.00000    
   Component 2 range:    5.000000       10.00000    
  
   Number of bins per row and column =            4
  
  
  The data vector A to be binned:
  
     1   13.1678       6.12987    
     2   13.3900       10.7319    
     3   12.4169       10.9945    
     4   22.6343       5.17890    
     5   11.7185       11.7819    
     6   15.2528       9.12092    
     7   16.1053       7.33748    
     8   19.1076       3.05700    
     9   18.0305       6.97803    
    10   20.8552       9.68764    
    11   21.1345       10.2302    
    12   19.9429       11.3791    
    13   16.7058       8.25827    
    14   16.8878       7.71987    
    15   15.1752       3.93412    
    16   16.2422       6.77070    
    17   9.07272       8.17883    
    18   22.2796       4.54914    
    19   19.6351       11.3408    
    20   19.3261       3.43197    
    21   16.1635       9.15742    
    22   22.5005       8.74493    
    23   13.6708       5.98829    
    24   22.9675       7.13858    
    25   16.1271       8.03986    
    26   9.95011       8.92279    
    27   8.52198       7.37245    
    28   20.8565       5.75489    
    29   12.3403       8.45910    
    30   9.86828       8.16523    
  
  The BIN_START array:
  
            1      2      3      4
  
     1     -1     27     17     -1
     2     -1      1     29      2
     3      8      7      6     12
     4     18      4     10     11
  
  The BIN_LAST array:
  
            1      2      3      4
  
     1     -1     27     17     -1
     2     -1      1     29      2
     3      8      7      6     12
     4     18      4     10     11
  
  The BIN_NEXT array:
  
     1   23
     2    3
     3    5
     4   24
     5    0
     6   13
     7    9
     8   15
     9   16
    10   22
    11    0
    12   19
    13   14
    14   21
    15   20
    16    0
    17   26
    18    0
    19    0
    20    0
    21   25
    22    0
    23    0
    24   28
    25    0
    26   30
    27    0
    28    0
    29    0
    30    0
  
   Contents of bin number            1           1
  
  
   Contents of bin number            1           2
  
   1  27   8.52198       7.37245    
  
   Contents of bin number            1           3
  
   1  17   9.07272       8.17883    
   2  26   9.95011       8.92279    
   3  30   9.86828       8.16523    
  
   Contents of bin number            1           4
  
  
   Contents of bin number            2           1
  
  
   Contents of bin number            2           2
  
   1   1   13.1678       6.12987    
   2  23   13.6708       5.98829    
  
   Contents of bin number            2           3
  
   1  29   12.3403       8.45910    
  
   Contents of bin number            2           4
  
   1   2   13.3900       10.7319    
   2   3   12.4169       10.9945    
   3   5   11.7185       11.7819    
  
   Contents of bin number            3           1
  
   1   8   19.1076       3.05700    
   2  15   15.1752       3.93412    
   3  20   19.3261       3.43197    
  
   Contents of bin number            3           2
  
   1   7   16.1053       7.33748    
   2   9   18.0305       6.97803    
   3  16   16.2422       6.77070    
  
   Contents of bin number            3           3
  
   1   6   15.2528       9.12092    
   2  13   16.7058       8.25827    
   3  14   16.8878       7.71987    
   4  21   16.1635       9.15742    
   5  25   16.1271       8.03986    
  
   Contents of bin number            3           4
  
   1  12   19.9429       11.3791    
   2  19   19.6351       11.3408    
  
   Contents of bin number            4           1
  
   1  18   22.2796       4.54914    
  
   Contents of bin number            4           2
  
   1   4   22.6343       5.17890    
   2  24   22.9675       7.13858    
   3  28   20.8565       5.75489    
  
   Contents of bin number            4           3
  
   1  10   20.8552       9.68764    
   2  22   22.5005       8.74493    
  
   Contents of bin number            4           4
  
   1  11   21.1345       10.2302    
  
   Call R2VEC_BINNED_REORDER to reorder the array.
  
  
  The data vector, sorted by bins:
  
     1   8.52198       7.37245    
     2   9.07272       8.17883    
     3   9.95011       8.92279    
     4   9.86828       8.16523    
     5   13.1678       6.12987    
     6   13.6708       5.98829    
     7   12.3403       8.45910    
     8   13.3900       10.7319    
     9   12.4169       10.9945    
    10   11.7185       11.7819    
    11   19.1076       3.05700    
    12   15.1752       3.93412    
    13   19.3261       3.43197    
    14   16.1053       7.33748    
    15   18.0305       6.97803    
    16   16.2422       6.77070    
    17   15.2528       9.12092    
    18   16.7058       8.25827    
    19   16.8878       7.71987    
    20   16.1635       9.15742    
    21   16.1271       8.03986    
    22   19.9429       11.3791    
    23   19.6351       11.3408    
    24   22.2796       4.54914    
    25   22.6343       5.17890    
    26   22.9675       7.13858    
    27   20.8565       5.75489    
    28   20.8552       9.68764    
    29   22.5005       8.74493    
    30   21.1345       10.2302    
  
  The BIN_START array:
  
            1      2      3      4
  
     1     -1      1      2     -1
     2     -1      5      7      8
     3     11     14     17     22
     4     24     25     28     30
  
  The BIN_LAST array:
  
            1      2      3      4
  
     1     -1      1      4     -1
     2     -1      6      7     10
     3     13     16     21     23
     4     24     27     29     30
  
  The BIN_NEXT array:
  
     1    0
     2    3
     3    4
     4    0
     5    6
     6    0
     7    0
     8    9
     9   10
    10    0
    11   12
    12   13
    13    0
    14   15
    15   16
    16    0
    17   18
    18   19
    19   20
    20   21
    21    0
    22   23
    23    0
    24    0
    25   26
    26   27
    27    0
    28   29
    29    0
    30    0
  
  The data vector, with sorted bins:
  
     1   8.52198       7.37245    
     2   9.07272       8.17883    
     3   9.86828       8.16523    
     4   9.95011       8.92279    
     5   13.1678       6.12987    
     6   13.6708       5.98829    
     7   12.3403       8.45910    
     8   11.7185       11.7819    
     9   12.4169       10.9945    
    10   13.3900       10.7319    
    11   15.1752       3.93412    
    12   19.1076       3.05700    
    13   19.3261       3.43197    
    14   16.1053       7.33748    
    15   16.2422       6.77070    
    16   18.0305       6.97803    
    17   15.2528       9.12092    
    18   16.1271       8.03986    
    19   16.1635       9.15742    
    20   16.7058       8.25827    
    21   16.8878       7.71987    
    22   19.6351       11.3408    
    23   19.9429       11.3791    
    24   22.2796       4.54914    
    25   20.8565       5.75489    
    26   22.6343       5.17890    
    27   22.9675       7.13858    
    28   20.8552       9.68764    
    29   22.5005       8.74493    
    30   21.1345       10.2302    
  
 TEST0685
   RANDOM_SEED is a FORTRAN90 routine which sets or gets
     the random number set.
   RANDOM_NUMBER returns a uniformly distributed random 
     value between 0 and 1.
  
   Starting with seed =   1123876595
   Number of values computed was N =         1000
   Average value was   0.5051584    
   Variance was   8.5194126E-02
  
 TEST069
   RAT_FACTOR factors a rational value.
  
   Rational value is         1638 /          12
  
   Prime representation:
  
   I, FACTOR(I), POWER(I)
  
       1       2      -1
       2       3       1
       3       7       1
       4      13       1
  
 TEST070
   RCOL_FIND finds a column in a table matching
     a given set of data.
  
   RCOL_FIND returns ICOL =            3
  
 TEST071
   RCOL_SORT_A sorts a table of columns.
   RCOL_INSERT inserts new columns.
  
  
  The unsorted matrix:
  
            1             2             3             4
  
     1   2.00000       4.00000       1.00000       3.00000    
     2   6.00000       8.00000       5.00000       7.00000    
     3   10.0000       12.0000       9.00000       11.0000    
  
  The sorted matrix:
  
            1             2             3             4
  
     1   1.00000       2.00000       3.00000       4.00000    
     2   5.00000       6.00000       7.00000       8.00000    
     3   9.00000       10.0000       11.0000       12.0000    
  
  New column:
  
     1   3.00000    
     2   7.00000    
     3   11.0000    
  
   The data was already in column            3
  
  New column:
  
     1   3.00000    
     2   4.00000    
     3   18.0000    
  
  The updated matrix:
  
            1             2             3             4             5
  
     1   1.00000       2.00000       3.00000       3.00000       4.00000    
     2   5.00000       6.00000       4.00000       7.00000       8.00000    
     3   9.00000       10.0000       18.0000       11.0000       12.0000    
  
 TEST072
   For a real matrix regarded as columns;
   RCOL_MAX computes maximums;
   RCOL_MEAN computes means;
   RCOL_MIN computes minimums;
   RCOL_SUM computes sums;
   RCOL_SWAP swaps two;
   RCOL_VARIANCE computes variances;
  
  The array:
  
            1             2             3             4
  
     1   1.00000       2.00000       3.00000       4.00000    
     2   5.00000       6.00000       7.00000       8.00000    
     3   9.00000       10.0000       11.0000       12.0000    
  
 Column, maximum, minimum, sum, mean, variance:
  
  1       9.0000    1.0000   15.0000    5.0000   16.0000
  2      10.0000    2.0000   18.0000    6.0000   16.0000
  3      11.0000    3.0000   21.0000    7.0000   16.0000
  4      12.0000    4.0000   24.0000    8.0000   16.0000
  
 Swap columns 1 and 3:
  
  The updated matrix:
  
            1             2             3             4
  
     1   3.00000       2.00000       1.00000       4.00000    
     2   7.00000       6.00000       5.00000       8.00000    
     3   11.0000       10.0000       9.00000       12.0000    
  
 TEST073
   RCOL_SORTR_A is given an array, and reorders
     it so that a particular column is sorted.
  
   Here, the special column is            2
  
  Unsorted array:
  
            1             2             3
  
     1   7.80763       2.76864       2.55013    
     2  0.840383E-01   2.43136       3.80256    
     3   9.64895       9.98783       5.53258    
     4   6.09276      0.935260       8.91094    
     5   6.17735       2.72554       8.23132    
     6   3.78269       5.71414       7.48174    
     7   5.64964       3.54236       6.39841    
     8   8.05502      0.726726       4.08403    
     9  0.323759       1.42105       3.58699    
    10   6.46582       1.04860       3.84186    
  
  Sorted array:
  
            1             2             3
  
     1   8.05502      0.726726       4.08403    
     2   6.09276      0.935260       8.91094    
     3   6.46582       1.04860       3.84186    
     4  0.323759       1.42105       3.58699    
     5  0.840383E-01   2.43136       3.80256    
     6   6.17735       2.72554       8.23132    
     7   7.80763       2.76864       2.55013    
     8   5.64964       3.54236       6.39841    
     9   3.78269       5.71414       7.48174    
    10   9.64895       9.98783       5.53258    
  
 TEST1735
   RCOL_TO_RVEC converts an array of columns into a vector.
  
  
  The array of columns:
  
            1             2             3             4
  
     1   11.0000       12.0000       13.0000       14.0000    
     2   21.0000       22.0000       23.0000       24.0000    
     3   31.0000       32.0000       33.0000       34.0000    
  
  The resulting vector of columns:
  
     1   11.0000    
     2   21.0000    
     3   31.0000    
     4   12.0000    
     5   22.0000    
     6   32.0000    
     7   13.0000    
     8   23.0000    
     9   33.0000    
    10   14.0000    
    11   24.0000    
    12   34.0000    
  
 TEST0775
   RMAT_CHOLESKY_FACTOR computes the lower
   triangular Cholesky factor of a positive
   definite symmetric matrix.
   RMAT_CHOLESKY_SOLVE solves a linear system
   using the Cholesky factorization.
  
  Matrix to be factored:
  
            1             2             3             4             5
  
     1   2.00000      -1.00000       0.00000       0.00000       0.00000    
     2  -1.00000       2.00000      -1.00000       0.00000       0.00000    
     3   0.00000      -1.00000       2.00000      -1.00000       0.00000    
     4   0.00000       0.00000      -1.00000       2.00000      -1.00000    
     5   0.00000       0.00000       0.00000      -1.00000       2.00000    
  
  Cholesky factor C:
  
            1             2             3             4             5
  
     1   1.41421       0.00000       0.00000       0.00000       0.00000    
     2 -0.707107       1.22474       0.00000       0.00000       0.00000    
     3   0.00000     -0.816497       1.15470       0.00000       0.00000    
     4   0.00000       0.00000     -0.866025       1.11803       0.00000    
     5   0.00000       0.00000       0.00000     -0.894427       1.09545    
  
  Product C * C':
  
            1             2             3             4             5
  
     1   2.00000      -1.00000       0.00000       0.00000       0.00000    
     2  -1.00000       2.00000      -1.00000       0.00000       0.00000    
     3   0.00000      -1.00000       2.00000      -1.00000       0.00000    
     4   0.00000       0.00000      -1.00000       2.00000      -1.00000    
     5   0.00000       0.00000       0.00000      -1.00000       2.00000    
  
  Right hand side:
  
     1   0.00000    
     2   0.00000    
     3   0.00000    
     4   0.00000    
     5   6.00000    
  
  Computed solution:
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
     4   4.00000    
     5   5.00000    
  
 TEST078
   Determinants of matrices:
   RMAT_DET_2D: 2 by 2 matrix;
   RMAT_DET_3D: 3 by 3 matrix;
   RMAT_DET_4D: 4 by 4 matrix;
   RMAT_DET_5D: 5 by 5 matrix.
   RMAT_VAND2 computes the row Vandermonde matrix.
  
  Matrix:
  
            1             2
  
     1   1.00000       1.00000    
     2   1.00000       10.0000    
  
   RMAT_DET_2D computes determinant:   9.000000    
   Exact determinant is    9.000000    
  
  Matrix:
  
            1             2             3
  
     1   1.00000       1.00000       1.00000    
     2   1.00000       10.0000       100.000    
     3   1.00000       4.00000       16.0000    
  
   RMAT_DET_3D computes determinant:  -162.0000    
   Exact determinant is   -162.0000    
  
  Matrix:
  
            1             2             3             4
  
     1   1.00000       1.00000       1.00000       1.00000    
     2   1.00000       10.0000       100.000       1000.00    
     3   1.00000       4.00000       16.0000       64.0000    
     4   1.00000       2.00000       4.00000       8.00000    
  
   RMAT_DET_4D computes determinant:  -2592.000    
   Exact determinant is   -2592.000    
  
  Matrix:
  
            1             2             3             4             5
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2   1.00000       10.0000       100.000       1000.00       10000.0    
     3   1.00000       4.00000       16.0000       64.0000       256.000    
     4   1.00000       2.00000       4.00000       8.00000       16.0000    
     5   1.00000       3.00000       9.00000       27.0000       81.0000    
  
   RMAT_DET_5D computes determinant:   -36288.00    
   Exact determinant is   -36288.00    
  
 TEST0745
   RMAT_EXPAND_LINEAR fills in a large array by
   interpolating data from a small array.
  
  
  The little matrix A:
  
            1             2
  
     1   11.0000       12.0000    
     2   21.0000       22.0000    
     3   31.0000       32.0000    
  
  Expanded array B:
  
            1             2             3             4             5
  
     1   11.0000       11.2500       11.5000       11.7500       12.0000    
     2   13.2222       13.4722       13.7222       13.9722       14.2222    
     3   15.4444       15.6944       15.9444       16.1944       16.4444    
     4   17.6667       17.9167       18.1667       18.4167       18.6667    
     5   19.8889       20.1389       20.3889       20.6389       20.8889    
     6   22.1111       22.3611       22.6111       22.8611       23.1111    
     7   24.3333       24.5833       24.8333       25.0833       25.3333    
     8   26.5556       26.8056       27.0556       27.3056       27.5556    
     9   28.7778       29.0278       29.2778       29.5278       29.7778    
    10   31.0000       31.2500       31.5000       31.7500       32.0000    
  
 TEST075
   RMAT_GIVENS_POST computes a Givens postmultiplier rotation matrices.
  
  Matrix A:
  
            1             2             3
  
     1   1.00000       1.00000       1.00000    
     2   1.00000       2.00000       4.00000    
     3   1.00000       3.00000       9.00000    
  
   I, J=           3           2
  
  G
  
            1             2             3
  
     1   1.00000       0.00000       0.00000    
     2   0.00000      0.948683      0.316228    
     3   0.00000     -0.316228      0.948683    
  
  A*G
  
            1             2             3
  
     1   1.00000      0.632456       1.26491    
     2   1.00000      0.632456       4.42719    
     3   1.00000      0.238419E-06   9.48683    
  
 TEST0756
   RMAT_GIVENS_PRE computes a Givens premultiplier rotation matrices.
  
  Matrix A:
  
            1             2             3
  
     1   1.00000       1.00000       1.00000    
     2   1.00000       2.00000       4.00000    
     3   1.00000       3.00000       9.00000    
  
   I, J=           3           2
  
  G
  
            1             2             3
  
     1   1.00000       0.00000       0.00000    
     2   0.00000      0.554700      0.832050    
     3   0.00000     -0.832050      0.554700    
  
  GA
  
            1             2             3
  
     1   1.00000       1.00000       1.00000    
     2   1.38675       3.60555       9.70725    
     3 -0.277350       0.00000       1.66410    
  
 TEST009
   RVEC_DIF estimates derivatives.
  
   Estimate the derivative of order N =            4
   Using H =   9.9999998E-03
   at argument X =    1.000000    
  
  The difference coefficients:
  
     1  0.625000E+07
     2 -0.250000E+08
     3  0.375000E+08
     4 -0.250000E+08
     5  0.625000E+07
  
   Estimate is FDIF =   0.0000000E+00
  
 TEST0754
   RVEC_HOUSE_COLUMN returns the compact form of
   a Householder matrix that "packs" a column
   of a matrix.
  
  Matrix A:
  
            1             2             3             4
  
     1  0.829380E-01   3.93941       4.60518       4.28381    
     2   2.92238       1.42320       4.80128      0.921836E-01
     3   4.32954       1.61205       3.71834       4.11018    
     4   4.76418       1.56848       1.36329       2.83490    
  
   Working on column K =            1
  
  Householder matrix H:
  
            1             2             3             4
  
     1 -0.117306E-01 -0.413330     -0.612354     -0.673827    
     2 -0.413330      0.831139     -0.250170     -0.275284    
     3 -0.612354     -0.250170      0.629370     -0.407837    
     4 -0.673827     -0.275284     -0.407837      0.551221    
  
  Product H*A:
  
            1             2             3             4
  
     1  -7.07033      -2.67849      -5.23410      -4.51547    
     2   0.00000      -1.28046      0.781562      -3.50265    
     3 -0.238419E-06  -2.39346      -2.23692      -1.21562    
     4 -0.238419E-06  -2.83914      -5.18981      -3.02555    
  
   Working on column K =            2
  
  Householder matrix H:
  
            1             2             3             4
  
     1   1.00000       0.00000       0.00000       0.00000    
     2   0.00000     -0.325984     -0.609338     -0.722802    
     3   0.00000     -0.609338      0.719987     -0.332153    
     4   0.00000     -0.722802     -0.332153      0.605997    
  
  Product H*A:
  
            1             2             3             4
  
     1  -7.07033      -2.67849      -5.23410      -4.51547    
     2  0.317607E-06   3.92797       4.85947       4.06940    
     3 -0.924668E-07  0.298023E-06 -0.362979       2.26401    
     4 -0.652894E-07  0.238419E-06  -2.96692       1.10202    
  
   Working on column K =            3
  
  Householder matrix H:
  
            1             2             3             4
  
     1   1.00000       0.00000       0.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000    
     3   0.00000       0.00000     -0.121436     -0.992599    
     4   0.00000       0.00000     -0.992599      0.121436    
  
  Product H*A:
  
            1             2             3             4
  
     1  -7.07033      -2.67849      -5.23410      -4.51547    
     2  0.317607E-06   3.92797       4.85947       4.06940    
     3  0.760350E-07 -0.272845E-06   2.98904      -1.36880    
     4  0.838540E-07 -0.266865E-06 -0.298023E-07  -2.11343    
  
 TEST0755
   RMAT_HOUSE_FORM forms a Householder
     matrix from its compact form.
  
  Compact vector form V:
  
     1   0.00000    
     2   0.00000    
     3   1.00000    
     4   2.00000    
     5   3.00000    
  
  Householder matrix H:
  
            1             2             3             4             5
  
     1   1.00000       0.00000       0.00000       0.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000       0.00000    
     3   0.00000       0.00000      0.857143     -0.285714     -0.428571    
     4   0.00000       0.00000     -0.285714      0.428571     -0.857143    
     5   0.00000       0.00000     -0.428571     -0.857143     -0.285714    
  
 TEST076
   RMAT_HOUSE_POST computes a Householder
     postmultiplier;
  
  Matrix A:
  
            1             2             3             4             5
  
     1   1.16805       1.41245       3.97310      0.812514      0.916279    
     2   4.90046       2.02560       4.29966       4.37699       4.07388    
     3   4.69940       2.82112       4.50267       1.32998       2.96082    
     4   2.54450      0.373192       2.23045       2.21799       2.78423    
     5   4.60045       4.84444      0.434412       1.16975      0.592267E-01
  
   I, J=           2           3
  
  Householder matrix H:
  
            1             2             3             4             5
  
     1   1.00000       0.00000       0.00000       0.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000       0.00000    
     3   0.00000       0.00000     -0.583805     -0.594305     -0.553149    
     4   0.00000       0.00000     -0.594305      0.776994     -0.207563    
     5   0.00000       0.00000     -0.553149     -0.207563      0.806811    
  
  Product A*H:
  
            1             2             3             4             5
  
     1   1.16805       1.41245      -3.30923      -1.92010      -1.62710    
     2   4.90046       2.02560      -7.36489     -0.298023E-06 -0.238419E-06
     3   4.69940       2.82112      -5.05687      -2.25713     -0.377875    
     4   2.54450      0.373192      -4.16041     -0.180106      0.552205    
     5   4.60045       4.84444     -0.981564      0.638425     -0.435307    
  
 TEST0761
   RMAT_HOUSE_PRE computes a Householder
     premultiplier;
  
  Matrix A:
  
            1             2             3             4             5
  
     1  0.423658      0.417291       3.40766       2.49189       1.14573    
     2   1.23794       1.11150      0.915200       1.75948       1.64033    
     3   4.05518      0.476701       1.91127       2.63263       1.69385    
     4   3.60950       4.81200      0.256534       1.57402       4.58188    
     5   2.72574       1.48584       2.45651       1.63132       2.55260    
  
   I, J=           2           3
  
  Householder matrix H:
  
            1             2             3             4             5
  
     1   1.00000       0.00000       0.00000       0.00000       0.00000    
     2   0.00000     -0.281223     -0.587295     -0.788282E-01 -0.754840    
     3   0.00000     -0.587295      0.730792     -0.361338E-01 -0.346009    
     4   0.00000     -0.788282E-01 -0.361338E-01  0.995150     -0.464421E-01
     5   0.00000     -0.754840     -0.346009     -0.464421E-01  0.555282    
  
  Product H*A:
  
            1             2             3             4             5
  
     1  0.423658      0.417291       3.40766       2.49189       1.14573    
     2  -5.07176      -2.09343      -3.25435      -3.39640      -3.74408    
     3   1.16290     -0.992395     -0.357628E-06  0.269246     -0.774287    
     4   3.22129       4.61481     -0.521541E-07   1.25680       4.25060    
     5 -0.991658     -0.402366     -0.596046E-06  -1.40630     -0.619656    
  
 TEST082
   RMAT_INVERSE_2D inverts a 2 by 2 matrix.
  
  
  Matrix to invert:
  
            1             2
  
     1   1.00000       2.00000    
     2   3.00000       4.00000    
  
  Inverse matrix:
  
            1             2
  
     1  -2.00000       1.00000    
     2   1.50000     -0.500000    
  
  Product:
  
            1             2
  
     1   1.00000       0.00000    
     2   0.00000       1.00000    
  
 TEST083
   RMAT_INVERSE_3D inverts a 3 by 3 matrix.
  
  
  Matrix to be inverted:
  
            1             2             3
  
     1   1.00000       2.00000       3.00000    
     2   4.00000       5.00000       6.00000    
     3   7.00000       8.00000       0.00000    
  
  Inverse matrix:
  
            1             2             3
  
     1  -1.77778      0.888889     -0.111111    
     2   1.55556     -0.777778      0.222222    
     3 -0.111111      0.222222     -0.111111    
  
  Product:
  
            1             2             3
  
     1   1.00000       0.00000       0.00000    
     2 -0.178814E-06   1.00000      0.596046E-07
     3   0.00000       0.00000       1.00000    
  
 TEST084
   RMAT_INVERSE_4D inverts a 4 x 4 matrix.
  
  Matrix to be inverted:
  
            1             2             3             4
  
     1   4.00000       3.00000       2.00000       1.00000    
     2   3.00000       3.00000       2.00000       1.00000    
     3   0.00000       2.00000       2.00000       1.00000    
     4   0.00000       0.00000       1.00000       1.00000    
  
   Determinant is    1.000000    
  
  Inverse:
  
            1             2             3             4
  
     1   1.00000      -1.00000       0.00000       0.00000    
     2  -3.00000       4.00000      -1.00000       0.00000    
     3   6.00000      -8.00000       3.00000      -1.00000    
     4  -6.00000       8.00000      -3.00000       2.00000    
  
  Product:
  
            1             2             3             4
  
     1   1.00000       0.00000       0.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000       0.00000    
     4   0.00000       0.00000       0.00000       1.00000    
  
 TEST0734
   RMAT_L_INVERSE inverts a lower triangular matrix.
  
  Matrix to be inverted:
  
            1             2             3             4
  
     1   1.00000       0.00000       0.00000       0.00000    
     2   2.00000       3.00000       0.00000       0.00000    
     3   4.00000       5.00000       6.00000       0.00000    
     4   7.00000       8.00000       9.00000       10.0000    
  
  Inverse matrix:
  
            1             2             3             4
  
     1   1.00000       0.00000       0.00000       0.00000    
     2 -0.666667      0.333333       0.00000       0.00000    
     3 -0.111111     -0.277778      0.166667       0.00000    
     4 -0.666667E-01 -0.166667E-01 -0.150000      0.100000    
  
  Product:
  
            1             2             3             4
  
     1   1.00000       0.00000       0.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000       0.00000    
     4   0.00000       0.00000       0.00000       1.00000    
  
 TEST0735
   RMAT_L1_INVERSE inverts a unit lower triangular matrix.
  
  Matrix to be inverted:
  
            1             2             3             4             5
  
     1   1.00000       0.00000       0.00000       0.00000       0.00000    
     2   2.00000       1.00000       0.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000       0.00000       0.00000    
     4   5.00000       0.00000       3.00000       1.00000       0.00000    
     5   0.00000       0.00000       0.00000       0.00000       1.00000    
     6   75.0000       0.00000       0.00000       6.00000       4.00000    
  
            6
  
     1   0.00000    
     2   0.00000    
     3   0.00000    
     4   0.00000    
     5   0.00000    
     6   1.00000    
  
  Inverse matrix:
  
            1             2             3             4             5
  
     1   1.00000       0.00000       0.00000       0.00000       0.00000    
     2  -2.00000       1.00000       0.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000       0.00000       0.00000    
     4  -5.00000       0.00000      -3.00000       1.00000       0.00000    
     5   0.00000       0.00000       0.00000       0.00000       1.00000    
     6  -45.0000       0.00000       18.0000      -6.00000      -4.00000    
  
            6
  
     1   0.00000    
     2   0.00000    
     3   0.00000    
     4   0.00000    
     5   0.00000    
     6   1.00000    
  
  Product:
  
            1             2             3             4             5
  
     1   1.00000       0.00000       0.00000       0.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000       0.00000       0.00000    
     4   0.00000       0.00000       0.00000       1.00000       0.00000    
     5   0.00000       0.00000       0.00000       0.00000       1.00000    
     6   0.00000       0.00000       0.00000       0.00000       0.00000    
  
            6
  
     1   0.00000    
     2   0.00000    
     3   0.00000    
     4   0.00000    
     5   0.00000    
     6   1.00000    
  
 TEST079
   RMAT_LU computes the LU factors of a matrix.
  
  Matrix to be factored:
  
            1             2             3             4             5
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2   1.00000       10.0000       100.000       1000.00       10000.0    
     3   1.00000       4.00000       16.0000       64.0000       256.000    
     4   1.00000       2.00000       4.00000       8.00000       16.0000    
     5   1.00000       3.00000       9.00000       27.0000       81.0000    
  
  P factor:
  
            1             2             3             4             5
  
     1   1.00000       0.00000       0.00000       0.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000       0.00000       0.00000    
     4   0.00000       0.00000       0.00000       1.00000       0.00000    
     5   0.00000       0.00000       0.00000       0.00000       1.00000    
  
  L factor:
  
            1             2             3             4             5
  
     1   1.00000       0.00000       0.00000       0.00000       0.00000    
     2   1.00000       1.00000       0.00000       0.00000       0.00000    
     3   1.00000      0.333333       1.00000       0.00000       0.00000    
     4   1.00000      0.111111      0.444444       1.00000       0.00000    
     5   1.00000      0.222222      0.777778      0.875000       1.00000    
  
  U factor:
  
            1             2             3             4             5
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2   0.00000       9.00000       99.0000       999.000       9999.00    
     3   0.00000       0.00000      -18.0000      -270.000      -3078.00    
     4   0.00000       0.00000       0.00000       16.0000       272.000    
     5   0.00000       0.00000       0.00000       0.00000       14.0000    
  
  P*L*U:
  
            1             2             3             4             5
  
     1   1.00000       1.00000       1.00000       1.00000       1.00000    
     2   1.00000       10.0000       100.000       1000.00       10000.0    
     3   1.00000       4.00000       16.0000       64.0000       256.000    
     4   1.00000       2.00000       4.00000       8.00000       16.0000    
     5   1.00000       3.00000       9.00000       27.0000       81.0000    
  
 TEST074
   RMAT_IMAX locates the maximum;
   RMAT_IMIN locates the minimum;
   RMAT_MAX computes the maximum;
   RMAT_MAXCOL_MINROW computes the maximum over
     columns of the mininum over rows;
   RMAT_MAXROW_MINCOL computes the maximum over
     rows of the mininum over columns;
   RMAT_MIN computes the minimum;
   RMAT_MINCOL_MAXROW computes the minimum over
     columns of the maxinum over rows;
   RMAT_MINROW_MAXCOL computes the minimum over
     rows of the maxinum over columns;
  
  
  Random array:
  
            1             2             3
  
     1   3.15530       1.06080       8.86323    
     2   4.31777       8.68826       3.55576    
     3   1.65533       1.05042       4.43303    
     4   5.86452       5.06984       8.74052    
     5   1.85150       8.18513       7.54915    
  
   In each pair of numbers, the smaller should
   occur first:
  
   Minimum, Maximum =                8.863231       1.050421    
   Maximum I,J indices                       1           3
   Minimum I,J indices                       3           2
   MAXCOL_MINROW, MINROW_MAXCOL =    5.069837       5.864525    
   MAXROW_MINCOL, MINCOL_MAXROW =    3.555760       4.433026    
  
 TEST0799
   RMAT_ORTH_RANDOM computes a random orthogonal matrix.
  
  Random orthogonal matrix A
  
            1             2             3             4             5
  
     1 -0.116372      0.895159      0.351624      0.195118      0.153096    
     2 -0.470381      0.115458     -0.154318E-01 -0.867928      0.108966    
     3 -0.823774     -0.413767E-01 -0.279968      0.412423     -0.266849    
     4  0.808020E-01  0.484194E-01  0.384836     -0.157752     -0.904512    
     5  0.282959      0.425798     -0.806004     -0.116838     -0.274476    
  
  AT*A
  
            1             2             3             4             5
  
     1   1.00000      0.156570E-07  0.100613E-07  0.227777E-08  0.718576E-08
     2  0.156570E-07   1.00000      0.706188E-07 -0.602181E-07  0.758193E-07
     3  0.100613E-07  0.706188E-07   1.00000     -0.175698E-06  0.562062E-07
     4  0.227777E-08 -0.602181E-07 -0.175698E-06   1.00000     -0.951191E-08
     5  0.718576E-08  0.758193E-07  0.562062E-07 -0.951191E-08   1.00000    
  
 TEST07995
   RMAT_POWER_METHOD applies the power method
   to a matrix.
  
   Estimated eigenvalue =    3.731976    
  
  Estimated eigenvector V:
  
     1  0.292882    
     2 -0.500045    
     3  0.573096    
     4 -0.499777    
     5  0.293187    
  
  Value of A*V:
  
     1   1.08581    
     2  -1.86607    
     3   2.14601    
     4  -1.86584    
     5   1.08615    
  
 TEST080
   RMAT_SOLVE solves a 3 by 3 system.
  
  
  The linear system:
  
            1             2             3             4             5
  
     1   1.00000       2.00000       3.00000       14.0000       7.00000    
     2   4.00000       5.00000       6.00000       32.0000       16.0000    
     3   7.00000       8.00000       0.00000       23.0000       7.00000    
  
   The computed solutions:
  
   1.00000       1.00000    
   2.00000       0.00000    
   3.00000       2.00000    
  
 TEST077
   For a real symmetric matrix:
   RMAT_SYMM_JACOBI diagonalizes;
   RMAT_SYMM_RANDOM randomizes.
  
  
  Matrix to diagonalize:
  
            1             2             3             4             5
  
     1   2.33193      0.378968      0.362494     -0.520386     -0.176318    
     2  0.378968       3.47568     -0.231012      0.492893E-01  -1.51533    
     3  0.362494     -0.231012       3.29878     -0.510216      0.233387    
     4 -0.520386      0.492895E-01 -0.510216       3.62192     -0.957470    
     5 -0.176318      -1.51533      0.233387     -0.957470       2.27169    
  
   Computed Eigenvalues:
  
   2.00000    
   3.00000    
   4.00000    
   5.00000    
   1.00000    
  
 TEST081
   RMAT_TRACE computes the trace of a matrix
  
  Matrix:
  
            1             2             3             4
  
     1   4.00000       3.00000       2.00000       1.00000    
     2   3.00000       3.00000       2.00000       1.00000    
     3   0.00000       2.00000       2.00000       1.00000    
     4   0.00000       0.00000       1.00000       1.00000    
  
   Trace is    10.00000    
  
 TEST0813
   RMAT_TRANSPOSE transposes a matrix
  
  Matrix:
  
            1             2
  
     1   11.0000       12.0000    
     2   21.0000       22.0000    
     3   31.0000       32.0000    
     4   41.0000       42.0000    
  
  Transposed matrix:
  
            1             2             3             4
  
     1   11.0000       21.0000       31.0000       41.0000    
     2   12.0000       22.0000       32.0000       42.0000    
  
  Matrix:
  
            1             2             3
  
     1   11.0000       12.0000       13.0000    
     2   21.0000       22.0000       23.0000    
     3   31.0000       32.0000       33.0000    
  
  Transposed matrix:
  
            1             2             3
  
     1   11.0000       21.0000       31.0000    
     2   12.0000       22.0000       32.0000    
     3   13.0000       23.0000       33.0000    
  
  Matrix:
  
            1             2             3             4             5
  
     1   11.0000       12.0000       13.0000       14.0000       15.0000    
     2   21.0000       22.0000       23.0000       24.0000       25.0000    
  
  Transposed matrix:
  
            1             2
  
     1   11.0000       21.0000    
     2   12.0000       22.0000    
     3   13.0000       23.0000    
     4   14.0000       24.0000    
     5   15.0000       25.0000    
  
 TEST0814
   RMAT_U_INVERSE inverts an upper triangular matrix.
  
  Input matrix
  
            1             2             3             4
  
     1   1.00000       2.00000       4.00000       7.00000    
     2   0.00000       3.00000       5.00000       8.00000    
     3   0.00000       0.00000       6.00000       9.00000    
     4   0.00000       0.00000       0.00000       10.0000    
  
  Inverse matrix:
  
            1             2             3             4
  
     1   1.00000     -0.666667     -0.111111     -0.666666E-01
     2   0.00000      0.333333     -0.277778     -0.166667E-01
     3   0.00000       0.00000      0.166667     -0.150000    
     4   0.00000       0.00000       0.00000      0.100000    
  
  Product:
  
            1             2             3             4
  
     1   1.00000       0.00000       0.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000       0.00000    
     4   0.00000       0.00000       0.00000       1.00000    
  
 TEST0815
   RMAT_U1_INVERSE inverts a unit upper triangular matrix.
  
  Input matrix
  
            1             2             3             4             5
  
     1   1.00000       2.00000       0.00000       5.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000       3.00000       0.00000    
     4   0.00000       0.00000       0.00000       1.00000       0.00000    
     5   0.00000       0.00000       0.00000       0.00000       1.00000    
     6   0.00000       0.00000       0.00000       0.00000       0.00000    
  
            6
  
     1   75.0000    
     2   0.00000    
     3   0.00000    
     4   6.00000    
     5   4.00000    
     6   1.00000    
  
  Inverse matrix:
  
            1             2             3             4             5
  
     1   1.00000      -2.00000       0.00000      -5.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000      -3.00000       0.00000    
     4   0.00000       0.00000       0.00000       1.00000       0.00000    
     5   0.00000       0.00000       0.00000       0.00000       1.00000    
     6   0.00000       0.00000       0.00000       0.00000       0.00000    
  
            6
  
     1  -45.0000    
     2   0.00000    
     3   18.0000    
     4  -6.00000    
     5  -4.00000    
     6   1.00000    
  
  Product:
  
            1             2             3             4             5
  
     1   1.00000       0.00000       0.00000       0.00000       0.00000    
     2   0.00000       1.00000       0.00000       0.00000       0.00000    
     3   0.00000       0.00000       1.00000       0.00000       0.00000    
     4   0.00000       0.00000       0.00000       1.00000       0.00000    
     5   0.00000       0.00000       0.00000       0.00000       1.00000    
     6   0.00000       0.00000       0.00000       0.00000       0.00000    
  
            6
  
     1   0.00000    
     2   0.00000    
     3   0.00000    
     4   0.00000    
     5   0.00000    
     6   1.00000    
  
 TEST085
   ROOTS_TO_RPOLY computes the coefficients of
     a polynomial from its roots.
   RPOLY_PRINT prints a polynomial.
  
  Roots:
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
     4   4.00000    
  
  The polynomial
  
 p(x) =     1.00000     * x ^   4
        -   10.0000     * x ^   3
        +   35.0000     * x ^   2
        -   50.0000     * x
        +   24.0000    
  
 TEST086
   RPOLY_LAGRANGE_COEF returns the coefficients
     for a Lagrange basis polynomial.
   RPOLY_PRINT prints a polynomial.
  
  Abscissas:
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
  
  The Lagrange basis polynomial:
  
 p(x) =    0.500000     * x ^   2
        -   2.50000     * x
        +   3.00000    
  
  The Lagrange basis polynomial:
  
 p(x) = -   1.00000     * x ^   2
        +   4.00000     * x
        -   3.00000    
  
  The Lagrange basis polynomial:
  
 p(x) =    0.500000     * x ^   2
        -   1.50000     * x
        +   1.00000    
  
 TEST087
   RPOLY_LAGRANGE_FACTOR evaluates the Lagrange
     factor W(X) at a point.
  
   For this test, we use            5  functions.
  
  Abscissas:
  
     1   0.00000    
     2   1.00000    
     3   2.00000    
     4   3.00000    
     5   4.00000    
  
       X          W(X)          W'(X)
  
   0.000       0.000       24.00    
  0.5000       3.281      -4.438    
   1.000       0.000      -6.000    
   1.500      -1.406      0.5625    
   2.000       0.000       4.000    
   2.500       1.406      0.5625    
   3.000       0.000      -6.000    
   3.500      -3.281      -4.438    
   4.000       0.000       24.00    
  
 TEST088
   RPOLY_LAGRANGE_VAL evaluates a Lagrange
     interpolating polynomial at a point.
  
   For this test, we use            5  functions.
  
  Abscissas:
  
     1   0.00000    
     2   1.00000    
     3   2.00000    
     4   3.00000    
     5   4.00000    
  
   Here are the values of the functions at 
   several points:
  
       X          L1          L2          L3      L4          L5
  
   0.000       1.000       0.000       0.000       0.000       0.000    
  0.5000      0.2734       1.094     -0.5469      0.2188     -0.3906E-01
   1.000       0.000       1.000       0.000       0.000       0.000    
   1.500     -0.3906E-01  0.4688      0.7031     -0.1563      0.2344E-01
   2.000       0.000       0.000       1.000       0.000       0.000    
   2.500      0.2344E-01 -0.1563      0.7031      0.4688     -0.3906E-01
   3.000       0.000       0.000       0.000       1.000       0.000    
   3.500     -0.3906E-01  0.2188     -0.5469       1.094      0.2734    
   4.000       0.000       0.000       0.000       0.000       1.000    
  
   And the derivatives:
  
       X          L'1         L'2         L'3     L'4         L'5
  
   0.000      -2.083       4.000      -3.000       1.333     -0.2500    
  0.5000     -0.9167      0.7083      0.3750     -0.2083      0.4167E-01
   1.000     -0.2500     -0.8333       1.500     -0.5000      0.8333E-01
   1.500      0.4167E-01  -1.125       1.125     -0.4167E-01   0.000    
   2.000      0.8333E-01 -0.6667       0.000      0.6667     -0.8333E-01
   2.500       0.000      0.4167E-01  -1.125       1.125     -0.4167E-01
   3.000     -0.8333E-01  0.5000      -1.500      0.8333      0.2500    
   3.500     -0.4167E-01  0.2083     -0.3750     -0.7083      0.9167    
   4.000      0.2500      -1.333       3.000      -4.000       2.083    
  
 TEST089
   RPOLY_LS_SET sets a least squares polynomial,
   RPOLY_LS_VAL evaluates it.
  
   X, F(X), P(X), Error
  
  
   K =            1
  
  -1.00000      0.370000       1.19429      0.824286    
 -0.900000      0.410000       1.19429      0.784286    
 -0.800000      0.450000       1.19429      0.744286    
 -0.700000      0.500000       1.19429      0.694286    
 -0.600000      0.550000       1.19429      0.644286    
 -0.500000      0.610000       1.19429      0.584286    
 -0.400000      0.670000       1.19429      0.524286    
 -0.300000      0.740000       1.19429      0.454286    
 -0.200000      0.820000       1.19429      0.374286    
 -0.100000      0.900000       1.19429      0.294286    
   0.00000       1.00000       1.19429      0.194286    
  0.100000       1.11000       1.19429      0.842857E-01
  0.200000       1.22000       1.19429     -0.257143E-01
  0.300000       1.35000       1.19429     -0.155714    
  0.400000       1.49000       1.19429     -0.295714    
  0.500000       1.65000       1.19429     -0.455714    
  0.600000       1.82000       1.19429     -0.625714    
  0.700000       2.01000       1.19429     -0.815714    
  0.800000       2.23000       1.19429      -1.03571    
  0.900000       2.46000       1.19429      -1.26571    
   1.00000       2.72000       1.19429      -1.52571    
  
   K =            2
  
  -1.00000      0.370000      0.812988E-01 -0.288701    
 -0.900000      0.410000      0.192598     -0.217402    
 -0.800000      0.450000      0.303896     -0.146104    
 -0.700000      0.500000      0.415195     -0.848051E-01
 -0.600000      0.550000      0.526494     -0.235065E-01
 -0.500000      0.610000      0.637792      0.277923E-01
 -0.400000      0.670000      0.749091      0.790910E-01
 -0.300000      0.740000      0.860390      0.120390    
 -0.200000      0.820000      0.971688      0.151688    
 -0.100000      0.900000       1.08299      0.182987    
   0.00000       1.00000       1.19429      0.194286    
  0.100000       1.11000       1.30558      0.195584    
  0.200000       1.22000       1.41688      0.196883    
  0.300000       1.35000       1.52818      0.178182    
  0.400000       1.49000       1.63948      0.149480    
  0.500000       1.65000       1.75078      0.100779    
  0.600000       1.82000       1.86208      0.420779E-01
  0.700000       2.01000       1.97338     -0.366234E-01
  0.800000       2.23000       2.08468     -0.145325    
  0.900000       2.46000       2.19597     -0.264026    
   1.00000       2.72000       2.30727     -0.412727    
  
   K =            3
  
  -1.00000      0.370000      0.425003      0.550028E-01
 -0.900000      0.410000      0.433190      0.231903E-01
 -0.800000      0.450000      0.452232      0.223160E-02
 -0.700000      0.500000      0.482127     -0.178733E-01
 -0.600000      0.550000      0.522876     -0.271243E-01
 -0.500000      0.610000      0.574478     -0.355216E-01
 -0.400000      0.670000      0.636935     -0.330651E-01
 -0.300000      0.740000      0.710245     -0.297548E-01
 -0.200000      0.820000      0.794409     -0.255905E-01
 -0.100000      0.900000      0.889427     -0.105726E-01
   0.00000       1.00000      0.995299     -0.470078E-02
  0.100000       1.11000       1.11202      0.202477E-02
  0.200000       1.22000       1.23960      0.196042E-01
  0.300000       1.35000       1.37804      0.280373E-01
  0.400000       1.49000       1.52732      0.373244E-01
  0.500000       1.65000       1.68747      0.374652E-01
  0.600000       1.82000       1.85846      0.384599E-01
  0.700000       2.01000       2.04031      0.303085E-01
  0.800000       2.23000       2.23301      0.301051E-02
  0.900000       2.46000       2.43657     -0.234332E-01
   1.00000       2.72000       2.65098     -0.690234E-01
  
   K =            4
  
  -1.00000      0.370000      0.363870     -0.613022E-02
 -0.900000      0.410000      0.408737     -0.126290E-02
 -0.800000      0.450000      0.454806      0.480568E-02
 -0.700000      0.500000      0.503148      0.314790E-02
 -0.600000      0.550000      0.554836      0.483638E-02
 -0.500000      0.610000      0.610944      0.943661E-03
 -0.400000      0.670000      0.672542      0.254220E-02
 -0.300000      0.740000      0.740705      0.704527E-03
 -0.200000      0.820000      0.816503     -0.349683E-02
 -0.100000      0.900000      0.901011      0.101054E-02
   0.00000       1.00000      0.995299     -0.470078E-02
  0.100000       1.11000       1.10044     -0.955832E-02
  0.200000       1.22000       1.21751     -0.248945E-02
  0.300000       1.35000       1.34758     -0.242186E-02
  0.400000       1.49000       1.49172      0.171709E-02
  0.500000       1.65000       1.65100      0.100005E-02
  0.600000       1.82000       1.82650      0.649929E-02
  0.700000       2.01000       2.01929      0.928736E-02
  0.800000       2.23000       2.23044      0.436544E-03
  0.900000       2.46000       2.46102      0.101995E-02
   1.00000       2.72000       2.71211     -0.789022E-02
  
 TEST090
   RPOLY_LS_SET sets a least squares polynomial,
   RPOLY_LS_VAL2 evaluates it.
  
   X, F(X), P(X), FP(X), PP(X)
  
  
   K =            1
  
  -1.00000      -4.00000      -5.63333      -3.00000       0.00000    
 -0.900000      -4.29000      -5.63333      -2.80000       0.00000    
 -0.800000      -4.56000      -5.63333      -2.60000       0.00000    
 -0.700000      -4.81000      -5.63333      -2.40000       0.00000    
 -0.600000      -5.04000      -5.63333      -2.20000       0.00000    
 -0.500000      -5.25000      -5.63333      -2.00000       0.00000    
 -0.400000      -5.44000      -5.63333      -1.80000       0.00000    
 -0.300000      -5.61000      -5.63333      -1.60000       0.00000    
 -0.200000      -5.76000      -5.63333      -1.40000       0.00000    
 -0.100000      -5.89000      -5.63333      -1.20000       0.00000    
   0.00000      -6.00000      -5.63333      -1.00000       0.00000    
  0.100000      -6.09000      -5.63333     -0.800000       0.00000    
  0.200000      -6.16000      -5.63333     -0.600000       0.00000    
  0.300000      -6.21000      -5.63333     -0.400000       0.00000    
  0.400000      -6.24000      -5.63333     -0.200000       0.00000    
  0.500000      -6.25000      -5.63333       0.00000       0.00000    
  0.600000      -6.24000      -5.63333      0.200000       0.00000    
  0.700000      -6.21000      -5.63333      0.400000       0.00000    
  0.800000      -6.16000      -5.63333      0.600000       0.00000    
  0.900000      -6.09000      -5.63333      0.800000       0.00000    
   1.00000      -6.00000      -5.63333       1.00000       0.00000    
  
   K =            2
  
  -1.00000      -4.00000      -4.63333      -3.00000     -0.999999    
 -0.900000      -4.29000      -4.73333      -2.80000     -0.999999    
 -0.800000      -4.56000      -4.83333      -2.60000     -0.999999    
 -0.700000      -4.81000      -4.93333      -2.40000     -0.999999    
 -0.600000      -5.04000      -5.03333      -2.20000     -0.999999    
 -0.500000      -5.25000      -5.13333      -2.00000     -0.999999    
 -0.400000      -5.44000      -5.23333      -1.80000     -0.999999    
 -0.300000      -5.61000      -5.33333      -1.60000     -0.999999    
 -0.200000      -5.76000      -5.43333      -1.40000     -0.999999    
 -0.100000      -5.89000      -5.53333      -1.20000     -0.999999    
   0.00000      -6.00000      -5.63333      -1.00000     -0.999999    
  0.100000      -6.09000      -5.73333     -0.800000     -0.999999    
  0.200000      -6.16000      -5.83333     -0.600000     -0.999999    
  0.300000      -6.21000      -5.93333     -0.400000     -0.999999    
  0.400000      -6.24000      -6.03333     -0.200000     -0.999999    
  0.500000      -6.25000      -6.13333       0.00000     -0.999999    
  0.600000      -6.24000      -6.23333      0.200000     -0.999999    
  0.700000      -6.21000      -6.33333      0.400000     -0.999999    
  0.800000      -6.16000      -6.43333      0.600000     -0.999999    
  0.900000      -6.09000      -6.53333      0.800000     -0.999999    
   1.00000      -6.00000      -6.63333       1.00000     -0.999999    
  
   K =            3
  
  -1.00000      -4.00000      -4.00000      -3.00000      -3.00000    
 -0.900000      -4.29000      -4.29000      -2.80000      -2.80000    
 -0.800000      -4.56000      -4.56000      -2.60000      -2.60000    
 -0.700000      -4.81000      -4.81000      -2.40000      -2.40000    
 -0.600000      -5.04000      -5.04000      -2.20000      -2.20000    
 -0.500000      -5.25000      -5.25000      -2.00000      -2.00000    
 -0.400000      -5.44000      -5.44000      -1.80000      -1.80000    
 -0.300000      -5.61000      -5.61000      -1.60000      -1.60000    
 -0.200000      -5.76000      -5.76000      -1.40000      -1.40000    
 -0.100000      -5.89000      -5.89000      -1.20000      -1.20000    
   0.00000      -6.00000      -6.00000      -1.00000     -0.999999    
  0.100000      -6.09000      -6.09000     -0.800000     -0.799999    
  0.200000      -6.16000      -6.16000     -0.600000     -0.599999    
  0.300000      -6.21000      -6.21000     -0.400000     -0.399999    
  0.400000      -6.24000      -6.24000     -0.200000     -0.199999    
  0.500000      -6.25000      -6.25000       0.00000      0.107288E-05
  0.600000      -6.24000      -6.24000      0.200000      0.200001    
  0.700000      -6.21000      -6.21000      0.400000      0.400001    
  0.800000      -6.16000      -6.16000      0.600000      0.600001    
  0.900000      -6.09000      -6.09000      0.800000      0.800002    
   1.00000      -6.00000      -6.00000       1.00000       1.00000    
  
   K =            4
  
  -1.00000      -4.00000      -4.00000      -3.00000      -3.00000    
 -0.900000      -4.29000      -4.29000      -2.80000      -2.80000    
 -0.800000      -4.56000      -4.56000      -2.60000      -2.60000    
 -0.700000      -4.81000      -4.81000      -2.40000      -2.40000    
 -0.600000      -5.04000      -5.04000      -2.20000      -2.20000    
 -0.500000      -5.25000      -5.25000      -2.00000      -2.00000    
 -0.400000      -5.44000      -5.44000      -1.80000      -1.80000    
 -0.300000      -5.61000      -5.61000      -1.60000      -1.60000    
 -0.200000      -5.76000      -5.76000      -1.40000      -1.40000    
 -0.100000      -5.89000      -5.89000      -1.20000      -1.20000    
   0.00000      -6.00000      -6.00000      -1.00000      -1.00000    
  0.100000      -6.09000      -6.09000     -0.800000     -0.800000    
  0.200000      -6.16000      -6.16000     -0.600000     -0.599999    
  0.300000      -6.21000      -6.21000     -0.400000     -0.399999    
  0.400000      -6.24000      -6.24000     -0.200000     -0.199999    
  0.500000      -6.25000      -6.25000       0.00000      0.117098E-05
  0.600000      -6.24000      -6.24000      0.200000      0.200001    
  0.700000      -6.21000      -6.21000      0.400000      0.400002    
  0.800000      -6.16000      -6.16000      0.600000      0.600002    
  0.900000      -6.09000      -6.09000      0.800000      0.800002    
   1.00000      -6.00000      -6.00000       1.00000       1.00000    
  
 TEST091
   RPOLY_VAL_HORNER evaluates a polynomial at a
   point, using Horner's method.
  
  The polynomial:
  
 p(x) =     1.00000     * x ^   4
        -   10.0000     * x ^   3
        +   35.0000     * x ^   2
        -   50.0000     * x
        +   24.0000    
  
   X,  P(X)
  
   0.00000       24.0000    
  0.333333       10.8642    
  0.666667       3.45679    
   1.00000       0.00000    
   1.33333     -0.987656    
   1.66667     -0.691359    
   2.00000       0.00000    
   2.33333      0.493820    
   2.66667      0.493835    
   3.00000       0.00000    
   3.33333     -0.691378    
   3.66667     -0.987644    
   4.00000       0.00000    
   4.33333       3.45680    
   4.66667       10.8642    
   5.00000       24.0000    
  
 TEST092
   RPOLY2_EX finds the extreme value
     of a parabola determined by three points.
   RPOLY2_EX2 finds the extreme value
     of a parabola determined by three points.
  
   Parabolic coefficients A, B, C =
   2.00000      -4.00000       10.0000    
  
   X, Y data:
  
(   1.00000    ,   8.00000    )
(   2.00000    ,   10.0000    )
(   3.00000    ,   16.0000    )
  
   RPOLY2_EX returns XMIN, YMIN =    1.000000       8.000000    
  
   RPOLY2_EX2 returns XMIN, YMIN =    1.000000       8.000000    
   and A, B, C =    2.000000      -4.000000       10.00000    
  
 TEST093
   RPOLY2_VAL evaluates a parabola given
     3 data points.
  
   Our parabola will be 2*x**2 + 3 * x + 1.
  
   Case 1: 3 distinct data points:
  
  -1.00000       0.00000    
   1.00000       6.00000    
   3.00000       28.0000    
  
 Sampled data:
  
   X, Y, Y', Y"
  
   0.00000       1.00000       3.00000       4.00000    
   1.00000       6.00000       7.00000       4.00000    
   2.00000       15.0000       11.0000       4.00000    
   3.00000       28.0000       15.0000       4.00000    
  
   Case 2: X1=X2, X3 distinct:
  
  -1.00000       0.00000    
  -1.00000      -1.00000    
   3.00000       28.0000    
  
 Sampled data:
  
   X, Y, Y', Y"
  
   0.00000       1.00000       3.00000       4.00000    
   1.00000       6.00000       7.00000       4.00000    
   2.00000       15.0000       11.0000       4.00000    
   3.00000       28.0000       15.0000       4.00000    
  
   Case 3: X1=X2=X3:
  
  -1.00000       0.00000    
  -1.00000      -1.00000    
  -1.00000       4.00000    
  
 Sampled data:
  
   X, Y, Y', Y"
  
   0.00000       1.00000       3.00000       4.00000    
   1.00000       6.00000       7.00000       4.00000    
   2.00000       15.0000       11.0000       4.00000    
   3.00000       28.0000       15.0000       4.00000    
  
 TEST094
   RPOLY2_VAL2 evaluates parabolas through
     3 points in a table
  
   Our data tables will actually be parabolas:
     A: 2*x**2 + 3 * x + 1.
     B: 4*x**2 - 2 * x + 5.
  
     1   2.00000       15.0000       17.0000    
     2   4.00000       45.0000       61.0000    
     3   6.00000       91.0000       137.000    
     4   8.00000       153.000       245.000    
     5   10.0000       231.000       385.000    
  
 Interpolated data:
  
   LEFT, X, Y1, Y2
  
       1   1.00000       6.00000       7.00000    
       2   3.00000       28.0000       35.0000    
       3   5.00000       66.0000       95.0000    
       3   7.00000       120.000       187.000    
       3   9.00000       190.000       311.000    
  
 TEST095
   RPOLY2_ROOT finds quadratic equation roots.
  
          A         B         C     R1         R2
  
     2.0    -2.0   -24.0   4.00000       0.00000      -3.00000       0.00000    
     1.0   -20.0   100.0   10.0000       0.00000       10.0000       0.00000    
     1.0    -2.0    10.0   1.00000       3.00000       1.00000      -3.00000    
  
 TEST096
   RPOLY3_ROOT finds roots of cubic equations.
  
  
   Polynomial coefficients A, B, C, D:
  
   1.00000      -6.00000       11.0000      -6.00000    
  
   Roots:
  
   1.00000       0.00000    
   3.00000       0.00000    
   2.00000       0.00000    
  
   Polynomial coefficients A, B, C, D:
  
   8.00000      -36.0000       54.0000      -27.0000    
  
   Roots:
  
   1.50000       0.00000    
   1.50000       0.00000    
   1.50000       0.00000    
  
   Polynomial coefficients A, B, C, D:
  
   1.00000      -5.00000       8.00000      -4.00000    
  
   Roots:
  
   1.00000       0.00000    
   2.00000       0.00000    
   2.00000       0.00000    
  
   Polynomial coefficients A, B, C, D:
  
   1.00000      -8.00000       25.0000      -26.0000    
  
   Roots:
  
   2.00000       0.00000    
   3.00000      -2.00000    
   3.00000       2.00000    
  
 TEST097
   RPOLY4_ROOT finds roots of quartic equations.
  
  
   A, B, C, D, E=   1.000000      -10.00000       35.00000      -50.00000    
   24.00000    
  
   Roots:
  
   4.00000       0.00000    
   1.00000       0.00000    
   3.00000       0.00000    
   2.00000       0.00000    
  
   A, B, C, D, E=   1.000000      -5.000000       1.000000       21.00000    
  -18.00000    
  
   Roots:
  
   3.00000       0.00000    
   3.00000       0.00000    
   1.00000       0.00000    
  -2.00000       0.00000    
  
   A, B, C, D, E=   1.000000      -22.00000       141.0000      -220.0000    
   100.0000    
  
   Roots:
  
   10.0000       0.00000    
   10.0000       0.00000    
   1.00000       0.00000    
   1.00000       0.00000    
  
   A, B, C, D, E=   1.000000      -16.00000       72.00000      -128.0000    
   80.00000    
  
   Roots:
  
   10.0000       0.00000    
   2.00000       0.00000    
   2.00000       0.00000    
   2.00000       0.00000    
  
   A, B, C, D, E=   1.000000      -20.00000       150.0000      -500.0000    
   625.0000    
  
   Roots:
  
   5.00000       0.00000    
   5.00000       0.00000    
   5.00000       0.00000    
   5.00000       0.00000    
  
   A, B, C, D, E=   1.000000       2.000000       1.000000       8.000000    
  -12.00000    
  
   Roots:
  
 -0.298023E-07   2.00000    
 -0.298023E-07  -2.00000    
   1.00000       0.00000    
  -3.00000       0.00000    
  
   A, B, C, D, E=   1.000000      0.0000000E+00   13.00000      0.0000000E+00
   36.00000    
  
   Roots:
  
   0.00000       3.00000    
   0.00000       2.00000    
   0.00000      -3.00000    
   0.00000      -2.00000    
  
 TEST098
   For a real matrix regarded as rows:
   RROW_MAX computes maximums;
   RROW_MEAN computes means;
   RROW_MIN computes minimums;
   RROW_SUM computes sums;
   RROW_SWAP swaps two;
   RROW_VARIANCE computes variances;
  
  The original matrix:
  
            1             2             3             4
  
     1   1.00000       2.00000       3.00000       4.00000    
     2   5.00000       6.00000       7.00000       8.00000    
     3   9.00000       10.0000       11.0000       12.0000    
  
 Maximum, minimum, sum, mean, variance:
  
  1       4.0000    1.0000   10.0000    2.5000    1.6667
  2       8.0000    5.0000   26.0000    6.5000    1.6667
  3      12.0000    9.0000   42.0000   10.5000    1.6667
  
 Swap rows 1 and 3:
  
  
  The modified matrix:
  
            1             2             3             4
  
     1   9.00000       10.0000       11.0000       12.0000    
     2   5.00000       6.00000       7.00000       8.00000    
     3   1.00000       2.00000       3.00000       4.00000    
  
 TEST0985
   RROW_TO_RVEC converts an array of rows into a vector.
  
  
  The array of rows:
  
            1             2             3             4
  
     1   11.0000       12.0000       13.0000       14.0000    
     2   21.0000       22.0000       23.0000       24.0000    
     3   31.0000       32.0000       33.0000       34.0000    
  
  The resulting vector of rows:
  
     1   11.0000    
     2   12.0000    
     3   13.0000    
     4   14.0000    
     5   21.0000    
     6   22.0000    
     7   23.0000    
     8   24.0000    
     9   31.0000    
    10   32.0000    
    11   33.0000    
    12   34.0000    
  
 TEST099
   For a real vector:
   RVEC_AMAX:     maximum magnitude entry;
   RVEC_AMIN:     minimum magnitude entry.
   RVEC_MAX:      maximum entry;
   RVEC_MEAN:     mean value;
   RVEC_MEDIAN:   median value;
   RVEC_MIN:      minimum entry.
   RVEC_NORM1:    L1 norm.
   RVEC_NORM2:    L2 norm.
   RVEC_NORMI:    L-infinity norm.
   RVEC_UNIT_SUM: make unit sum;
  
  
  Input vector:
  
     1   6.97464    
     2   2.84951    
     3  -8.35553    
     4   8.59889    
     5   1.58534    
     6   4.79533    
     7  -4.85212    
     8  -9.53260    
     9   5.52655    
    10   4.80365    
  
   Maximum:                    8.598892    
   Maximum index:                      4
   Minimum:                   -9.532604    
   Minimum index:                      8
   Maximum absolute:            9.532604    
   Maximum absolute index:              8
   Minimum absolute:            1.585340    
   Minimum absolute index:              5
   Mean:                        1.239367    
   Median:                      2.849506    
   L1 norm:                    57.87417    
   L2 norm:                    19.85097    
   L-Infinity norm:            9.532604    
  
  After calling RVEC_UNIT_SUM:
  
     1 -0.769151    
     2 -0.391500    
     3 -0.674177    
     4  0.127915    
     5  0.229916    
     6  0.386918    
     7  0.387589    
     8  0.562759    
     9  0.445918    
    10  0.693813    
  
 TEST100
   RVEC_BIN computes bins for a real vector.
  
  The vector to be binned:
  
     1   1.20774    
     2 -0.594094    
     3   6.06682    
     4  0.513606E-01
     5 -0.782494    
     6  -1.38360    
     7   9.81862    
     8   6.46203    
     9 -0.602767    
    10   3.29777    
    11  0.683599    
    12   4.25084    
    13   2.83283    
    14 -0.700366    
    15  0.944896    
    16   1.87260    
    17   6.72956    
    18   10.7473    
    19   2.42349    
    20   9.59330    
    21   2.62756    
    22   7.42348    
    23 -0.581375    
    24  -1.16433    
    25   3.06829    
  
   Number of bins is            5
   Bin minimum is   0.0000000E+00
   Bin maximum is    10.00000    
  
 Lower Limit    Upper Limit    Count
  
  0.0000  0.0000   7
  0.0000  2.0000   5
  2.0000  4.0000   5
  4.0000  6.0000   1
  6.0000  8.0000   4
  8.0000 10.0000   2
 10.0000           1
  
 TEST1005
   RVEC_BIN_EVEN constructs evenly spaced bins and
     assigns each element of a real array to a bin.
   RVEC_BINNED_REORDER can reorder the array
     to correspond to the bin ordering.
   RVEC_BINNED_SORT can sort the array
     once it has been reordered.
  
   The bins are equally spaced between BIN_MIN and BIN_MAX,
   with two extra bins, for things less than BIN_MIN,
   or greater than BIN_MAX.
  
   BIN_MIN =    10.00000    
   BIN_MAX =    20.00000    
   Total number of bins =            7
  
  
  The data vector A to be binned:
  
     1   15.8535    
     2   16.0812    
     3   18.5210    
     4   14.7125    
     5   10.7947    
     6   13.6558    
     7   10.7771    
     8   17.2760    
     9   14.9781    
    10   19.6437    
    11   14.2588    
    12   19.3510    
    13   13.4376    
    14   18.4321    
    15   20.7173    
    16   12.9139    
    17   20.9107    
    18   8.17563    
    19   19.7445    
    20   12.4072    
    21   10.0078    
    22   17.8997    
    23   11.8033    
    24   15.1258    
    25   11.1874    
    26   13.3153    
    27   16.4263    
    28   14.1290    
    29   12.7406    
    30   17.9397    
  
  The BIN_START array:
  
     1   18
     2    5
     3    6
     4    1
     5    2
     6    3
     7   15
  
  The BIN_LAST array:
  
     1   18
     2   25
     3   29
     4   28
     5   30
     6   19
     7   17
  
  The BIN_NEXT array:
  
     1    4
     2    8
     3   10
     4    9
     5    7
     6   13
     7   21
     8   22
     9   11
    10   12
    11   24
    12   14
    13   16
    14   19
    15   17
    16   20
    17    0
    18    0
    19    0
    20   26
    21   23
    22   27
    23   25
    24   28
    25    0
    26   29
    27   30
    28    0
    29    0
    30    0
  
   Contents of bin number            1
  
   1  18   8.17563    
  
   Contents of bin number            2
  
   1   5   10.7947    
   2   7   10.7771    
   3  21   10.0078    
   4  23   11.8033    
   5  25   11.1874    
  
   Contents of bin number            3
  
   1   6   13.6558    
   2  13   13.4376    
   3  16   12.9139    
   4  20   12.4072    
   5  26   13.3153    
   6  29   12.7406    
  
   Contents of bin number            4
  
   1   1   15.8535    
   2   4   14.7125    
   3   9   14.9781    
   4  11   14.2588    
   5  24   15.1258    
   6  28   14.1290    
  
   Contents of bin number            5
  
   1   2   16.0812    
   2   8   17.2760    
   3  22   17.8997    
   4  27   16.4263    
   5  30   17.9397    
  
   Contents of bin number            6
  
   1   3   18.5210    
   2  10   19.6437    
   3  12   19.3510    
   4  14   18.4321    
   5  19   19.7445    
  
   Contents of bin number            7
  
   1  15   20.7173    
   2  17   20.9107    
  
   Call RVEC_BINNED_REORDER to reorder the array.
  
  
  The data vector A:
  
     1   8.17563    
     2   10.7947    
     3   10.7771    
     4   10.0078    
     5   11.8033    
     6   11.1874    
     7   13.6558    
     8   13.4376    
     9   12.9139    
    10   12.4072    
    11   13.3153    
    12   12.7406    
    13   15.8535    
    14   14.7125    
    15   14.9781    
    16   14.2588    
    17   15.1258    
    18   14.1290    
    19   16.0812    
    20   17.2760    
    21   17.8997    
    22   16.4263    
    23   17.9397    
    24   18.5210    
    25   19.6437    
    26   19.3510    
    27   18.4321    
    28   19.7445    
    29   20.7173    
    30   20.9107    
  
  The BIN_START array:
  
     1    1
     2    2
     3    7
     4   13
     5   19
     6   24
     7   29
  
  The BIN_LAST array:
  
     1    1
     2    6
     3   12
     4   18
     5   23
     6   28
     7   30
  
  The BIN_NEXT array:
  
     1    0
     2    3
     3    4
     4    5
     5    6
     6    0
     7    8
     8    9
     9   10
    10   11
    11   12
    12    0
    13   14
    14   15
    15   16
    16   17
    17   18
    18    0
    19   20
    20   21
    21   22
    22   23
    23    0
    24   25
    25   26
    26   27
    27   28
    28    0
    29   30
    30    0
  
  The sorted data vector A:
  
     1   8.17563    
     2   10.0078    
     3   10.7771    
     4   10.7947    
     5   11.1874    
     6   11.8033    
     7   12.4072    
     8   12.7406    
     9   12.9139    
    10   13.3153    
    11   13.4376    
    12   13.6558    
    13   14.1290    
    14   14.2588    
    15   14.7125    
    16   14.9781    
    17   15.1258    
    18   15.8535    
    19   16.0812    
    20   16.4263    
    21   17.2760    
    22   17.8997    
    23   17.9397    
    24   18.4321    
    25   18.5210    
    26   19.3510    
    27   19.6437    
    28   19.7445    
    29   20.7173    
    30   20.9107    
  
 TEST101
   RVEC_BRACKET finds a pair of entries in a
     sorted real array which bracket a value.
  
  Sorted array:
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
     4   4.00000    
     5   5.00000    
     6   5.00000    
     7   7.00000    
     8   8.00000    
     9   9.00000    
    10   10.0000    
  
     LEFT             RIGHT
   X(LEFT)   XVAL   X(RIGHT)
  
             1                           2
   1.00000      -10.0000       2.00000    
             1                           2
   1.00000       1.00000       2.00000    
             4                           5
   4.00000       4.50000       5.00000    
             6                           7
   5.00000       5.00000       7.00000    
             9                          10
   9.00000       10.0000       10.0000    
             9                          10
   9.00000       12.0000       10.0000    
  
 TEST102
   RVEC_BRACKET2 finds a pair of entries in a
     sorted real array which bracket a value.
  
  Sorted array:
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
     4   4.00000    
     5   5.00000    
     6   5.00000    
     7   7.00000    
     8   8.00000    
     9   9.00000    
    10   10.0000    
  
 Search for XVAL =   -10.00000    
 Start =            5
 Left =            1
 Right =            2
 X(LEFT)=   1.000000    
 X(RIGHT) =    2.000000    
  
 Search for XVAL =    1.000000    
 Start =            1
 Left =            1
 Right =            1
 X(LEFT)=   1.000000    
 X(RIGHT) =    1.000000    
  
 Search for XVAL =    4.500000    
 Start =            1
 Left =            4
 Right =            5
 X(LEFT)=   4.000000    
 X(RIGHT) =    5.000000    
  
 Search for XVAL =    5.000000    
 Start =            4
 Left =            5
 Right =            5
 X(LEFT)=   5.000000    
 X(RIGHT) =    5.000000    
  
 Search for XVAL =    10.00000    
 Start =            5
 Left =            9
 Right =           10
 X(LEFT)=   9.000000    
 X(RIGHT) =    10.00000    
  
 Search for XVAL =    12.00000    
 Start =            9
 Left =           10
 Right =           -1
 X(LEFT)=   10.00000    
  
 TEST103
   RVEC_BRACKET3 finds a pair of entries in a
     sorted real array which bracket a value.
  
  Sorted array:
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
     4   4.00000    
     5   5.00000    
     6   5.00000    
     7   7.00000    
     8   8.00000    
     9   9.00000    
    10   10.0000    
  
   Search for XVAL =   -10.00000    
   Starting guess for interval is =            5
   Nearest interval:
     X{           1  ]=    1.000000    
     X[           2  ]=    2.000000    
  
   Search for XVAL =    1.000000    
   Starting guess for interval is =            1
   Nearest interval:
     X{           1  ]=    1.000000    
     X[           2  ]=    2.000000    
  
   Search for XVAL =    4.500000    
   Starting guess for interval is =            1
   Nearest interval:
     X{           4  ]=    4.000000    
     X[           5  ]=    5.000000    
  
   Search for XVAL =    5.000000    
   Starting guess for interval is =            4
   Nearest interval:
     X{           4  ]=    4.000000    
     X[           5  ]=    5.000000    
  
   Search for XVAL =    10.00000    
   Starting guess for interval is =            4
   Nearest interval:
     X{           9  ]=    9.000000    
     X[          10  ]=    10.00000    
  
   Search for XVAL =    12.00000    
   Starting guess for interval is =            9
   Nearest interval:
     X{           9  ]=    9.000000    
     X[          10  ]=    10.00000    
  
 TEST1035
   RVEC_CONVOLVE_CIRC computes the circular convolution
   of two vectors.
  
  The factor X:
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
     4   4.00000    
  
  The factor Y:
  
     1   1.00000    
     2   2.00000    
     3   4.00000    
     4   8.00000    
  
  The circular convolution z = xCCy:
  
     1   37.0000    
     2   44.0000    
     3   43.0000    
     4   26.0000    
  
  Correct answer:
  
     1   37.0000    
     2   44.0000    
     3   43.0000    
     4   26.0000    
  
 TEST104
   RVEC_EVEN computes N evenly spaced values
     between XLO and XHI.
  
   XLO =   0.0000000E+00  and XHI =    99.00000    
   while N =           10
  
  Resulting array:
  
     1   0.00000    
     2   11.0000    
     3   22.0000    
     4   33.0000    
     5   44.0000    
     6   55.0000    
     7   66.0000    
     8   77.0000    
     9   88.0000    
    10   99.0000    
  
 TEST105
   RVEC_EVEN2 interpolates a specified number of 
     points pairs of values in a vector.
  
   Input data:
  
   0.00000    
         4
   1.00000    
         3
   5.00000    
         5
   2.00000    
         0
   0.00000    
  
   Resulting vector:
  
*   0.00000    
  0.200000    
  0.400000    
  0.600000    
  0.800000    
*   1.00000    
   2.00000    
   3.00000    
   4.00000    
*   5.00000    
   4.50000    
   4.00000    
   3.50000    
   3.00000    
   2.50000    
*   2.00000    
*   0.00000    
  
 TEST106
   RVEC_EVEN3 tries to evenly interpolate new data
     between old values.
  
  
  Original vector:
  
     1   0.00000    
     2   5.10000    
     3   7.00000    
     4   10.0000    
  
  New vector:
  
     1   0.00000    
     2   1.02000    
     3   2.04000    
     4   3.06000    
     5   4.08000    
     6   5.10000    
     7   5.73333    
     8   6.36667    
     9   7.00000    
    10   8.00000    
    11   9.00000    
    12   10.0000    
  
 TEST107
   RVEC_FRAC: K-th smallest real vector entry;
  
  
  Array to search:
  
     1  0.150100    
     2  0.730532    
     3  0.580577E-01
     4  0.776239    
     5  0.243945    
     6  0.983949    
     7  0.238255    
     8  0.346954    
     9  0.250116    
    10  0.695371    
  
 Fractile  Value 
  
       1  0.580577E-01
       6  0.346954    
  
 TEST1071
   RVEC_INDEX_INSERT_UNIQUE inserts unique values into an
     index sorted array.
   RVEC_INDEX_SEARCH searches for an entry with a given value.
  
   Generate some random values:
  
      2.00
      5.00
      9.00
      9.00
     17.00
     14.00
      7.00
     18.00
      7.00
     13.00
     13.00
     19.00
     19.00
     10.00
      7.00
     17.00
     15.00
      4.00
     14.00
     13.00
  
   Indexed list of entries:
  
  I  INDX(I)  X(I)  X(INDX(I))
  
  1        1     2.00           2.00
  2       12     5.00           4.00
  3        2     9.00           5.00
  4        6    17.00           7.00
  5        3    14.00           9.00
  6       10     7.00          10.00
  7        8    18.00          13.00
  8        5    13.00          14.00
  9       11    19.00          15.00
 10        4    10.00          17.00
 11        7    15.00          18.00
 12        9     4.00          19.00
  
   Results of search for given XVAL:
  
XVAL  Less Equal More
  
  0.00     0     0     1
  1.00     0     0     1
  2.00     0     1     2
  3.00     1     0     2
  4.00     1     2     3
  5.00     2     3     4
  6.00     3     0     4
  7.00     3     4     5
  8.00     4     0     5
  9.00     4     5     6
 10.00     5     6     7
 11.00     6     0     7
 12.00     6     0     7
 13.00     6     7     8
 14.00     7     8     9
 15.00     8     9    10
 16.00     9     0    10
 17.00     9    10    11
 18.00    10    11    12
 19.00    11    12    13
 20.00    12     0    13
  
 TEST1072
   RVEC_INDEX_INSERT inserts values into an
     index sorted array.
   RVEC_INDEX_DELETE_ALL deletes all copies of a
     particular value.
   RVEC_INDEX_DELETE_ONE deletes one copies of a
     particular value.
   RVEC_INDEX_DELETE_DUPES deletes duplicates.
  
   Generate some random values:
  
     15.00
     19.00
      7.00
     11.00
     19.00
      2.00
     14.00
      8.00
      1.00
      6.00
      4.00
     19.00
     17.00
     12.00
      4.00
      7.00
      7.00
      4.00
      2.00
      6.00
  
   Indexed list of entries:
  
  I  INDX(I)  X(I)  X(INDX(I))
  
  1       11     8.00           1.00
  2        8     7.00           2.00
  3       21    15.00           2.00
  4       13    19.00           4.00
  5       20     7.00           4.00
  6       17    11.00           4.00
  7       12    19.00           6.00
  8       22     2.00           6.00
  9        2    14.00           7.00
 10        5     8.00           7.00
 11       19     1.00           7.00
 12       23     6.00           7.00
 13       18     4.00           7.00
 14        1    19.00           8.00
 15       24    17.00           8.00
 16       10    12.00           8.00
 17        6     4.00          11.00
 18       16     7.00          12.00
 19        9     7.00          14.00
 20        3     4.00          15.00
 21       15     2.00          17.00
 22        4     6.00          19.00
 23        7     7.00          19.00
 24       14     8.00          19.00
  
   Call RVEC_INDEX_DELETE_ONE to delete one value equal to 8:
  
   Call RVEC_INDEX_DELETE_ALL to delete all values equal to 7:
  
   Indexed list of entries:
  
  I  INDX(I)  X(I)  X(INDX(I))
  
  1        9     8.00           1.00
  2        6    15.00           2.00
  3       17    19.00           2.00
  4       11    11.00           4.00
  5       16    19.00           4.00
  6       15     2.00           4.00
  7       10    14.00           6.00
  8       18     8.00           6.00
  9        1     1.00           8.00
 10        8     6.00           8.00
 11        4     4.00          11.00
 12       14    19.00          12.00
 13        7    17.00          14.00
 14        2    12.00          15.00
 15       13     4.00          17.00
 16        3     4.00          19.00
 17        5     2.00          19.00
 18       12     6.00          19.00
  
   Call RVEC_INDEX_DELETE_DUPES to delete duplicates:
  
   Indexed list of unique entries:
  
  I  INDX(I)  X(I)
  
  1        1     1.00
  2        2     2.00
  3        3     4.00
  4        4     6.00
  5        5     8.00
  6        6    11.00
  7        7    12.00
  8        8    14.00
  9        9    15.00
 10       10    17.00
 11       11    19.00
  
 TEST1073
   RVEC_INDEX_INSERT_UNIQUE inserts unique values into an
     index sorted array.
   RVEC_INDEX_ORDER sorts an index sorted array.
  
   Generate some random values:
  
     17.00
      5.00
     17.00
     16.00
     10.00
      1.00
      2.00
     20.00
      8.00
     20.00
      5.00
     14.00
     11.00
      3.00
     11.00
     16.00
      1.00
     19.00
     20.00
     15.00
  
   Indexed list of unique entries:
  
  I  INDX(I)  X(I)  X(INDX(I))
  
  1        5    17.00           1.00
  2        6     5.00           2.00
  3       11    16.00           3.00
  4        2    10.00           5.00
  5        8     1.00           8.00
  6        4     2.00          10.00
  7       10    20.00          11.00
  8        9     8.00          14.00
  9       13    14.00          15.00
 10        3    11.00          16.00
 11        1     3.00          17.00
 12       12    19.00          19.00
 13        7    15.00          20.00
  
   Now call RVEC_INDEX_ORDER to carry out the sorting:
  
  I  X(I)
  
  1        1.00
  2        2.00
  3        3.00
  4        5.00
  5        8.00
  6       10.00
  7       11.00
  8       14.00
  9       15.00
 10       16.00
 11       17.00
 12       19.00
 13       20.00
  
 TEST108
   For ascending order:
   RVEC_MERGE_A merges two sorted real arrays;
   RVEC_SEARCH_BINARY_A searches a sorted array;
   RVEC_SORT_HEAP_A sorts a real array.
  
  
  Sorted vector A:
  
     1  0.730778E-02
     2  0.135432    
     3  0.179876    
     4  0.182174    
     5  0.205497    
     6  0.384901    
     7  0.781067    
     8  0.792118    
     9  0.821811    
    10  0.863986    
  
  Sorted vector B:
  
     1  0.232007E-01
     2  0.570363E-01
     3  0.105920    
     4  0.188017    
     5  0.192009    
     6  0.424738    
     7  0.573098    
     8  0.608448    
     9  0.934041    
    10  0.994473    
  
  Merged vector C:
  
     1  0.730778E-02
     2  0.232007E-01
     3  0.570363E-01
     4  0.105920    
     5  0.135432    
     6  0.179876    
     7  0.182174    
     8  0.188017    
     9  0.192009    
    10  0.205497    
    11  0.384901    
    12  0.424738    
    13  0.573098    
    14  0.608448    
    15  0.781067    
    16  0.792118    
    17  0.821811    
    18  0.863986    
    19  0.934041    
    20  0.994473    
  
   Search the array C for the value   0.8639857    
  
   SEARCH RESULT:
     The value occurs in index           18
  
 TEST109
   RVEC_ORDER_TYPE classifies a real vector as
   -1: no order
    0: all equal;
    1: ascending;
    2: strictly ascending;
    3: descending;
    4: strictly descending.
  
  
 The following vector has order type           -1
  
       1   1.00000    
       2   3.00000    
       3   2.00000    
       4   4.00000    
  
 The following vector has order type            0
  
       1   2.00000    
       2   2.00000    
       3   2.00000    
       4   2.00000    
  
 The following vector has order type            1
  
       1   1.00000    
       2   2.00000    
       3   2.00000    
       4   4.00000    
  
 The following vector has order type            2
  
       1   1.00000    
       2   2.00000    
       3   3.00000    
       4   4.00000    
  
 The following vector has order type            3
  
       1   4.00000    
       2   4.00000    
       3   3.00000    
       4   1.00000    
  
 The following vector has order type            4
  
       1   9.00000    
       2   7.00000    
       3   3.00000    
       4   0.00000    
  
 TEST110
   RVEC_PERMUTE permutes a real vector in place.
  
 I, Perm(I), X(I)
  
       1       2   1.00000    
       2       4   2.00000    
       3       5   3.00000    
       4       1   4.00000    
       5       3   5.00000    
  
  Permuted array:
  
     1   2.00000    
     2   4.00000    
     3   5.00000    
     4   1.00000    
     5   3.00000    
  
 TEST111
   RVEC_ROTATE rotates a real vector in place.
  
   Rotate entries            2  places to the right.
  
  Original array:
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
     4   4.00000    
     5   5.00000    
  
  Rotated array:
  
     1   4.00000    
     2   5.00000    
     3   1.00000    
     4   2.00000    
     5   3.00000    
  
 TEST112
   RVEC_REVERSE reverses a real vector.
  
  
  Original array:
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
     4   4.00000    
     5   5.00000    
  
  Reversed array:
  
     1   5.00000    
     2   4.00000    
     3   3.00000    
     4   2.00000    
     5   1.00000    
  
 TEST113
   RVEC_SORT_HEAP_A sorts a real vector.
  
  
  Original array:
  
     1   6.07756    
     2   25.5001    
     3  0.150593    
     4   11.0168    
     5   59.7959    
     6   49.0008    
     7   56.4095    
     8   14.8208    
     9   33.7801    
    10   22.5871    
    11   1.13094    
    12   47.6338    
    13   1.16340    
    14   53.1920    
    15   57.8379    
    16   22.3100    
    17   23.6390    
    18   41.0653    
    19   4.91183    
    20   53.0590    
  
  Sorted array:
  
     1  0.150593    
     2   1.13094    
     3   1.16340    
     4   4.91183    
     5   6.07756    
     6   11.0168    
     7   14.8208    
     8   22.3100    
     9   22.5871    
    10   23.6390    
    11   25.5001    
    12   33.7801    
    13   41.0653    
    14   47.6338    
    15   49.0008    
    16   53.0590    
    17   53.1920    
    18   56.4095    
    19   57.8379    
    20   59.7959    
  
 TEST114
   RVEC_SORT_HEAP_A sorts a real array;
   RVEC_UNIQ finds the unique entries in
     a sorted real array;
   RVEC_UNIQ_COUNT counts the unique entries
     of a sorted real array;
   RVEC_UNIQ_HIST makes a histogram.
  
  
  Unsorted array:
  
     1   21.0000    
     2   2.00000    
     3   8.00000    
     4   25.0000    
     5   18.0000    
     6   7.00000    
     7   9.00000    
     8   21.0000    
     9   10.0000    
    10   21.0000    
    11   2.00000    
    12   3.00000    
    13   1.00000    
    14   6.00000    
    15   4.00000    
    16   10.0000    
    17   18.0000    
    18   23.0000    
    19   24.0000    
    20   4.00000    
    21   18.0000    
    22   3.00000    
    23   10.0000    
    24   9.00000    
    25   6.00000    
    26   26.0000    
    27   7.00000    
    28   4.00000    
    29   4.00000    
    30   13.0000    
  
  Unique entries
  
     1   1.00000    
     2   2.00000    
     3   3.00000    
     4   4.00000    
     5   6.00000    
     6   7.00000    
     7   8.00000    
     8   9.00000    
     9   10.0000    
    10   13.0000    
    11   18.0000    
    12   21.0000    
    13   23.0000    
    14   24.0000    
    15   25.0000    
    16   26.0000    
  
   RVEC_UNIQ_COUNT counts           16  unique entries in A.
  
   RVEC_UNIQ3 counts           16  unique entries.
  
   Value  Multiplicity
  
       1   1.00000           1
       2   2.00000           2
       3   3.00000           2
       4   4.00000           4
       5   6.00000           2
       6   7.00000           2
       7   8.00000           1
       8   9.00000           2
       9   10.0000           3
      10   13.0000           1
      11   18.0000           3
      12   21.0000           3
      13   23.0000           1
      14   24.0000           1
      15   25.0000           1
      16   26.0000           1
  
 TEST115
   RVEC_SORT_HEAP_INDEX_A creates an ascending
     sort index for a real array.
   RVEC_SORT_HEAP_INDEX_D creates a descending
     sort index for a real array.
  
  Unsorted array:
  
     1   1.94106    
     2   43.3201    
     3   40.3984    
     4   15.8458    
     5   40.9847    
     6   30.2650    
     7   43.5230    
     8   31.6183    
     9   49.2459    
    10   35.0573    
    11   8.35245    
    12   39.6075    
    13   43.6942    
    14   27.6353    
    15   6.24957    
    16   36.5258    
    17   29.8014    
    18   51.9238    
    19   43.7758    
    20   19.7036    
  
   After indexed ascending sort:
  
   I, INDX(I), A(I)
  
       1       1   1.94106    
       2      15   43.3201    
       3      11   40.3984    
       4       4   15.8458    
       5      20   40.9847    
       6      14   30.2650    
       7      17   43.5230    
       8       6   31.6183    
       9       8   49.2459    
      10      10   35.0573    
      11      16   8.35245    
      12      12   39.6075    
      13       3   43.6942    
      14       5   27.6353    
      15       2   6.24957    
      16       7   36.5258    
      17      13   29.8014    
      18      19   51.9238    
      19       9   43.7758    
      20      18   19.7036    
  
   Now use the index array to carry out the
   permutation implicitly.
  
   INDX(I), A(INDX(I))
  
       1   1.94106    
      15   6.24957    
      11   8.35245    
       4   15.8458    
      20   19.7036    
      14   27.6353    
      17   29.8014    
       6   30.2650    
       8   31.6183    
      10   35.0573    
      16   36.5258    
      12   39.6075    
       3   40.3984    
       5   40.9847    
       2   43.3201    
       7   43.5230    
      13   43.6942    
      19   43.7758    
       9   49.2459    
      18   51.9238    
  
   Call RVEC_PERMUTE to carry out the permutation
   explicitly.
  
  
  I, A(I)
  
     1   1.94106    
     2   6.24957    
     3   8.35245    
     4   15.8458    
     5   19.7036    
     6   27.6353    
     7   29.8014    
     8   30.2650    
     9   31.6183    
    10   35.0573    
    11   36.5258    
    12   39.6075    
    13   40.3984    
    14   40.9847    
    15   43.3201    
    16   43.5230    
    17   43.6942    
    18   43.7758    
    19   49.2459    
    20   51.9238    
  
   After indexed descending sort:
  
   I, INDX(I), A(I)
  
       1      20   1.94106    
       2      19   6.24957    
       3      18   8.35245    
       4      17   15.8458    
       5      16   19.7036    
       6      15   27.6353    
       7      14   29.8014    
       8      13   30.2650    
       9      12   31.6183    
      10      11   35.0573    
      11      10   36.5258    
      12       9   39.6075    
      13       8   40.3984    
      14       7   40.9847    
      15       6   43.3201    
      16       5   43.5230    
      17       4   43.6942    
      18       3   43.7758    
      19       2   49.2459    
      20       1   51.9238    
  
   Now use the index array to carry out the
   permutation implicitly.
  
   INDX(I), ARRAY(INDX(I))
  
      20   51.9238    
      19   49.2459    
      18   43.7758    
      17   43.6942    
      16   43.5230    
      15   43.3201    
      14   40.9847    
      13   40.3984    
      12   39.6075    
      11   36.5258    
      10   35.0573    
       9   31.6183    
       8   30.2650    
       7   29.8014    
       6   27.6353    
       5   19.7036    
       4   15.8458    
       3   8.35245    
       2   6.24957    
       1   1.94106    
  
 TEST1154
   RVEC_SORT_INSERT_A ascending sorts a real array.
  
  Unsorted array:
  
     1   18.9020    
     2   45.2906    
     3   38.8774    
     4   11.6552    
     5   49.4673    
     6   36.9692    
     7   42.0200    
     8   29.3212    
     9   20.5837    
    10   50.7873    
    11   22.0002    
    12   36.7942    
    13   40.4104    
    14   36.7458    
    15   6.02200    
    16   51.7557    
    17   38.1225    
    18   44.1511    
    19   28.3544    
    20   32.4786    
  
  Sorted array:
  
     1   6.02200    
     2   11.6552    
     3   18.9020    
     4   20.5837    
     5   22.0002    
     6   28.3544    
     7   29.3212    
     8   32.4786    
     9   36.7458    
    10   36.7942    
    11   36.9692    
    12   38.1225    
    13   38.8774    
    14   40.4104    
    15   42.0200    
    16   44.1511    
    17   45.2906    
    18   49.4673    
    19   50.7873    
    20   51.7557    
  
 TEST1155
   RVEC_SORT_INSERT_INDEX_A creates an ascending
     sort index for a real array.
  
  Unsorted array:
  
     1   47.6659    
     2  0.212718    
     3   35.1497    
     4  0.233661    
     5   27.1423    
     6   1.19371    
     7   22.7412    
     8   11.7800    
     9   46.4526    
    10   9.35613    
    11   48.4167    
    12   19.3475    
    13   33.7144    
    14   57.9749    
    15   44.0200    
    16   43.5802    
    17   33.2737    
    18   31.8571    
    19   42.0714    
    20   54.5864    
  
   After indexed ascending sort:
  
   I, INDX(I), A(I)
  
       1       2   47.6659    
       2       4  0.212718    
       3       6   35.1497    
       4      10  0.233661    
       5       8   27.1423    
       6      12   1.19371    
       7       7   22.7412    
       8       5   11.7800    
       9      18   46.4526    
      10      17   9.35613    
      11      13   48.4167    
      12       3   19.3475    
      13      19   33.7144    
      14      16   57.9749    
      15      15   44.0200    
      16       9   43.5802    
      17       1   33.2737    
      18      11   31.8571    
      19      20   42.0714    
      20      14   54.5864    
  
   Now use the index array to carry out the
   permutation implicitly.
  
   INDX(I), A(INDX(I))
  
       2  0.212718    
       4  0.233661    
       6   1.19371    
      10   9.35613    
       8   11.7800    
      12   19.3475    
       7   22.7412    
       5   27.1423    
      18   31.8571    
      17   33.2737    
      13   33.7144    
       3   35.1497    
      19   42.0714    
      16   43.5802    
      15   44.0200    
       9   46.4526    
       1   47.6659    
      11   48.4167    
      20   54.5864    
      14   57.9749    
  
   Call RVEC_PERMUTE to carry out the permutation
   explicitly.
  
  
  I, A(I)
  
     1  0.212718    
     2  0.233661    
     3   1.19371    
     4   9.35613    
     5   11.7800    
     6   19.3475    
     7   22.7412    
     8   27.1423    
     9   31.8571    
    10   33.2737    
    11   33.7144    
    12   35.1497    
    13   42.0714    
    14   43.5802    
    15   44.0200    
    16   46.4526    
    17   47.6659    
    18   48.4167    
    19   54.5864    
    20   57.9749    
  
 TEST116
   RVEC_SPLIT_SORT splits a sorted vector into
   entries less than and greater than a
   splitting value.
   RVEC_SPLIT_UNSORT splits an unsorted vector
   in the same way.
  
  
  The sorted array:
  
     1   0.00000    
     2   0.00000    
     3  0.500000    
     4  0.500000    
     5   1.00000    
     6   1.50000    
     7   1.50000    
     8   1.50000    
     9   1.50000    
    10   2.00000    
    11   2.00000    
    12   2.00000    
    13   2.00000    
    14   2.00000    
    15   2.00000    
    16   2.50000    
    17   3.00000    
    18   3.00000    
    19   3.00000    
    20   3.50000    
    21   4.00000    
    22   4.50000    
    23   4.50000    
    24   4.50000    
    25   5.00000    
  
   Splitting value is    2.500000    
  
   Lower index I_LT =           15
   Upper index I_GT =           17
  
   Now repeat test with RVEC_SPLIT_UNSORT.
  
  
  The shuffled array:
  
     1   0.00000    
     2  0.500000    
     3   4.00000    
     4   5.00000    
     5   1.50000    
     6   1.50000    
     7   1.50000    
     8   0.00000    
     9   2.50000    
    10   3.00000    
    11   1.00000    
    12   2.00000    
    13   3.50000    
    14   2.00000    
    15   3.00000    
    16   4.50000    
    17   4.50000    
    18   3.00000    
    19   2.00000    
    20   1.50000    
    21   4.50000    
    22   2.00000    
    23   2.00000    
    24  0.500000    
    25   2.00000    
  
  The split array:
  
     1   0.00000    
     2  0.500000    
     3   2.00000    
     4  0.500000    
     5   1.50000    
     6   1.50000    
     7   1.50000    
     8   0.00000    
     9   2.50000    
    10   2.00000    
    11   1.00000    
    12   2.00000    
    13   2.00000    
    14   2.00000    
    15   1.50000    
    16   2.00000    
    17   3.00000    
    18   4.50000    
    19   4.50000    
    20   4.50000    
    21   3.00000    
    22   3.50000    
    23   3.00000    
    24   5.00000    
    25   4.00000    
  
   Array entries <= SPLIT up to index           16
  
 TEST1165
   For a pair of real vectors:
   RVEC2_SORT_A ascending sorts;
   RVEC2_SORT_D descending sorts;
   RVEC2_UNIQ counts unique entries.
  
  
  The pair of arrays:
  
     1   2.36828       9.94860    
     2   1.74331       6.05289    
     3   2.36828       9.94860    
     4   2.43940       7.63083    
     5   2.94808       6.33807    
     6   1.74331       6.05289    
     7   2.77894       7.45104    
     8   1.70978       9.62910    
     9   2.36828       9.94860    
    10   2.81496       7.43904    
  
  Arrays after ascending sort:
  
     1   1.70978       9.62910    
     2   1.74331       6.05289    
     3   1.74331       6.05289    
     4   2.36828       9.94860    
     5   2.36828       9.94860    
     6   2.36828       9.94860    
     7   2.43940       7.63083    
     8   2.77894       7.45104    
     9   2.81496       7.43904    
    10   2.94808       6.33807    
  
  Arrays after descending sort:
  
     1   2.94808       6.33807    
     2   2.81496       7.43904    
     3   2.77894       7.45104    
     4   2.43940       7.63083    
     5   2.36828       9.94860    
     6   2.36828       9.94860    
     7   2.36828       9.94860    
     8   1.74331       6.05289    
     9   1.74331       6.05289    
    10   1.70978       9.62910    
  
  UNIQed array:
  
     1   2.94808       6.33807    
     2   2.81496       7.43904    
     3   2.77894       7.45104    
     4   2.43940       7.63083    
     5   2.36828       9.94860    
     6   1.74331       6.05289    
     7   1.70978       9.62910    
  
 TEST126
   RVEC2_SORT_HEAP_INDEX_A creates a sort index
   for an (X,Y) array.
  
   The unsorted array:
  
   I, X(I), Y(I)
  
     1        0.300000      0.250000    
     2        0.700000      0.700000    
     3        0.700000      0.700000    
     4        0.900000      0.600000    
     5        0.350000      0.450000    
     6        0.700000      0.500000E-01
     7        0.350000      0.500000    
     8        0.600000      0.300000    
     9        0.500000E-01  0.750000    
    10        0.500000      0.300000    
    11        0.400000      0.750000    
    12        0.650000      0.500000E-01
    13        0.350000      0.950000    
    14        0.950000      0.450000    
    15        0.400000      0.250000    
    16        0.250000      0.900000    
    17        0.400000      0.450000    
    18        0.750000      0.700000    
    19        0.500000      0.850000    
    20        0.750000      0.300000    
  
   After sorting:
  
   I, INDX(I), X(I), Y(I)
  
     1     9  0.300000      0.250000    
     2    16  0.700000      0.700000    
     3     1  0.700000      0.700000    
     4     5  0.900000      0.600000    
     5     7  0.350000      0.450000    
     6    13  0.700000      0.500000E-01
     7    15  0.350000      0.500000    
     8    17  0.600000      0.300000    
     9    11  0.500000E-01  0.750000    
    10    10  0.500000      0.300000    
    11    19  0.400000      0.750000    
    12     8  0.650000      0.500000E-01
    13    12  0.350000      0.950000    
    14     6  0.950000      0.450000    
    15     3  0.400000      0.250000    
    16     2  0.250000      0.900000    
    17    20  0.400000      0.450000    
    18    18  0.750000      0.700000    
    19     4  0.500000      0.850000    
    20    14  0.750000      0.300000    
  
   Now use the index array to carry out the
   permutation implicitly.
  
   I, INDX(I), X(INDX(I)), Y(INDX(I))
  
     1     9  0.500000E-01  0.750000    
     2    16  0.250000      0.900000    
     3     1  0.300000      0.250000    
     4     5  0.350000      0.450000    
     5     7  0.350000      0.500000    
     6    13  0.350000      0.950000    
     7    15  0.400000      0.250000    
     8    17  0.400000      0.450000    
     9    11  0.400000      0.750000    
    10    10  0.500000      0.300000    
    11    19  0.500000      0.850000    
    12     8  0.600000      0.300000    
    13    12  0.650000      0.500000E-01
    14     6  0.700000      0.500000E-01
    15     3  0.700000      0.700000    
    16     2  0.700000      0.700000    
    17    20  0.750000      0.300000    
    18    18  0.750000      0.700000    
    19     4  0.900000      0.600000    
    20    14  0.950000      0.450000    
  
   RVEC_PERMUTE carries out the permutation.
  
   I, X(I), Y(I)
  
     1        0.500000E-01  0.750000    
     2        0.250000      0.900000    
     3        0.300000      0.250000    
     4        0.350000      0.450000    
     5        0.350000      0.500000    
     6        0.350000      0.950000    
     7        0.400000      0.250000    
     8        0.400000      0.450000    
     9        0.400000      0.750000    
    10        0.500000      0.300000    
    11        0.500000      0.850000    
    12        0.600000      0.300000    
    13        0.650000      0.500000E-01
    14        0.700000      0.500000E-01
    15        0.700000      0.700000    
    16        0.700000      0.700000    
    17        0.750000      0.300000    
    18        0.750000      0.700000    
    19        0.900000      0.600000    
    20        0.950000      0.450000    
  
 TEST117
   For 2 real vectors:
   RVEC2_SUM_IMAX: index of the sum vector
     with maximum value.
  
  
  The pair of vectors:
  
     1   5.77967       4.86358    
     2   8.91486       2.21922    
     3   2.11107       3.49433    
     4  0.714024       4.23775    
     5  0.604471       3.87000    
     6   9.33809       3.12026    
     7   5.27175       2.16956    
     8   2.28451       3.76329    
     9   5.84162       4.65186    
    10  0.814974E-01   3.83674    
  
   Index of maximum in A+B:            6
  
 TEST1174
   RVEC3_INDEX_INSERT_UNIQUE inserts unique values into an
     index sorted array.
   RVEC3_INDEX_SEARCH searches for an entry with a given value.
  
   Generate           30  random values:
  
      3.00  2.00  2.00
 IVAL =            1
      3.00  2.00  1.00
 IVAL =            1
      2.00  2.00  2.00
 IVAL =            1
      2.00  3.00  1.00
 IVAL =            2
      2.00  2.00  2.00
 IVAL =            1
      2.00  3.00  2.00
 IVAL =            3
      4.00  2.00  3.00
 IVAL =            6
      3.00  3.00  2.00
 IVAL =            6
      2.00  3.00  3.00
 IVAL =            4
      2.00  2.00  1.00
 IVAL =            1
      3.00  3.00  2.00
 IVAL =            8
      2.00  3.00  2.00
 IVAL =            4
      4.00  3.00  3.00
 IVAL =           10
      1.00  3.00  4.00
 IVAL =            1
      3.00  1.00  3.00
 IVAL =            7
      2.00  3.00  4.00
 IVAL =            7
      2.00  3.00  1.00
 IVAL =            4
      1.00  3.00  2.00
 IVAL =            1
      3.00  2.00  3.00
 IVAL =           12
      1.00  2.00  4.00
 IVAL =            1
      2.00  3.00  4.00
 IVAL =            9
      2.00  1.00  3.00
 IVAL =            4
      2.00  2.00  3.00
 IVAL =            7
      1.00  1.00  2.00
 IVAL =            1
      3.00  3.00  2.00
 IVAL =           17
      1.00  2.00  1.00
 IVAL =            2
      1.00  2.00  3.00
 IVAL =            3
      3.00  2.00  4.00
 IVAL =           19
      3.00  3.00  1.00
 IVAL =           20
      2.00  2.00  1.00
 IVAL =            8
  
   Indexed list of unique entries:
  
  I  INDX(I)  X(I)  X(INDX(I))
  
  1       19     1.00           1.00           2.00
  2       20     1.00           2.00           1.00
  3       21     1.00           2.00           3.00
  4       16     1.00           2.00           4.00
  5       14     1.00           3.00           2.00
  6       11     1.00           3.00           4.00
  7       17     2.00           1.00           3.00
  8        9     2.00           2.00           1.00
  9        3     2.00           2.00           2.00
 10       18     2.00           2.00           3.00
 11        4     2.00           3.00           1.00
 12        5     2.00           3.00           2.00
 13        8     2.00           3.00           3.00
 14       13     2.00           3.00           4.00
 15       12     3.00           1.00           3.00
 16        2     3.00           2.00           1.00
 17        1     3.00           2.00           2.00
 18       15     3.00           2.00           3.00
 19       22     3.00           2.00           4.00
 20       23     3.00           3.00           1.00
 21        7     3.00           3.00           2.00
 22        6     4.00           2.00           3.00
 23       10     4.00           3.00           3.00
  
 TEST1175
   SGE_HESS estimates the Hessian matrix
     of a scalar function.
  
  Estimated jacobian:
  
            1             2             3
  
     1   1.99140       1.00123       0.00000    
     2   1.00123       0.00000       9.84046    
     3   0.00000       9.84046      -30.7885    
  
  Exact jacobian:
  
            1             2             3
  
     1   2.00000       1.00000       0.00000    
     2   1.00000       0.00000       9.88032    
     3   0.00000       9.88032      -30.8503    
  
 TEST118
   SGE_JAC estimates the M by N jacobian matrix
     of a nonlinear function.
  
  Estimated jacobian:
  
            1             2             3             4
  
     1 -0.831485     -0.415246       0.00000       0.00000    
     2  0.691414       0.00000       1.00136       0.00000    
     3  0.953674       2.03451       3.00407       4.00543    
  
  Exact jacobian:
  
            1             2             3             4
  
     1 -0.832294     -0.416147       0.00000       0.00000    
     2  0.707107       0.00000       1.00000       0.00000    
     3   1.00000       2.00000       3.00000       4.00000    
  
 TEST119
   SGE_SOLVE is a linear solver.
  
  
  Right hand side:
  
     1   5.00000    
     2   11.0000    
  
   The system is nonsingular.
  
  Computed solution:
  
     1   1.00000    
     2   2.00000    
  
  Right hand side:
  
     1   4.00000    
     2   2.00000    
     3   2.00000    
  
 SGE_SOLVE - Warning:
   Consistent singularity, equation =            3
  
   The system is singular, but consistent.
  
  Computed solution:
  
     1   2.00000    
     2   0.00000    
     3   0.00000    
  
  Right hand side:
  
     1   5.00000    
     2   16.0000    
     3   14.0000    
     4   15.0000    
  
   The system is nonsingular.
  
  Computed solution:
  
     1  0.999999    
     2   2.00000    
     3   3.00000    
     4   4.00000    
  
  Right hand side:
  
     1   13.0000    
     2   17.0000    
     3   20.0000    
  
 SGE_SOLVE - Error:
   Inconsistent singularity, equation =            2
  
   The system is singular and inconsistent.
  
  Computed solution:
  
     1 -0.714285    
     2   0.00000    
     3   4.42857    
  
 TEST120
   SORT_HEAP_EXTERNAL sorts objects externally.
  
  
  Unorted array:
  
     1    1
     2    1
     3    1
     4    1
     5    1
     6    1
     7    1
     8    1
     9    1
    10    1
    11    1
    12    1
    13    1
    14    1
    15    1
    16    1
    17    1
    18    1
    19    1
    20    1
  
  Sorted array:
  
     1    1
     2    1
     3    1
     4    1
     5    1
     6    1
     7    1
     8    1
     9    1
    10    1
    11    1
    12    1
    13    1
    14    1
    15    1
    16    1
    17    1
    18    1
    19    1
    20    1
  
 TEST121
   SVEC_SORT_HEAP_A sorts a string vector.
   SVEC_REVERSE reverses a string vector.
  
   Unsorted list:
  
     FRED      
     fred      
     Abacus    
     beetles   
     XYLOPHONE 
     banana    
     goofball  
     abbot     
     BARBECUE  
     abbots    
  
   Sorted list:
  
     Abacus    
     BARBECUE  
     FRED      
     XYLOPHONE 
     abbot     
     abbots    
     banana    
     beetles   
     fred      
     goofball  
  
   Reversed sorted list:
  
     goofball  
     fred      
     beetles   
     banana    
     abbots    
     abbot     
     XYLOPHONE 
     FRED      
     BARBECUE  
     Abacus    
  
 TEST122
   For ascending order:
   SVEC_SORT_HEAP_A sorts a character array;
   SVEC_MERGE_A merges two sorted character 
     arrays into a single sorted array.
   SVEC_SEARCH_BINARY_A searches a string array for
     a particular value.
  
  
   Sorted vector A:
  
 AEEB
 BBAB
 BBBA
 CCAD
 DACA
 DCAE
 DCBE
 DCCA
 DDBE
 EEBB
  
   Sorted vector B:
  
 BBFB
 BCDE
 BCEB
 BEFB
 BFDC
 DBCB
 DBDC
 DFBC
 ECEC
 EEEF
  
   Merged output vector C = A + B:
  
 AEEB
 BBAB
 BBBA
 BBFB
 BCDE
 BCEB
 BEFB
 BFDC
 CCAD
 DACA
 DBCB
 DBDC
 DCAE
 DCBE
 DCCA
 DDBE
 DFBC
 ECEC
 EEBB
 EEEF
  
   Search C for value BBAB
  
   The value occurs at index            2
  
 TEST123
   SVEC_SORT_HEAP_A sorts a character array;
   SVEC_UNIQ finds the unique entries in a
     sorted character array.
  
  
   Input vector A:
  
     Ax 
     Ax 
     Ax 
     Bat
     Bat
     Cat
     Mat
     Pyx
     Tab
     Tab
  
   Unique entries:
  
     Ax 
     Bat
     Cat
     Mat
     Pyx
     Tab
  
 TEST124
   For implicitly capitalized strings,
   SVECI_SORT_HEAP_A sorts;
   SVECI_SEARCH_BINARY_A searches.
  
   Unsorted list:
  
     FRED      
     fred      
     Abacus    
     beetles   
     XYLOPHONE 
     banana    
     goofball  
     abbot     
     BARBECUE  
     abbots    
  
   Sorted list:
  
     Abacus    
     abbot     
     abbots    
     banana    
     BARBECUE  
     beetles   
     fred      
     FRED      
     goofball  
     XYLOPHONE 
  
   Now search for the string ABBoT     
  
   The search string occurs in index            2
  
 TEST1245
   UNIFORM_01_SAMPLE samples a uniform random
   distribution in [0,1].
  
   Starting with seed =   1302282597
   Number of values computed was N =         1000
   Average value was   0.5076606    
   Variance was   9.0324625E-02
  
 TEST127
   C_CUBE_ROOT finds complex cube roots.
  
           X                  Y=C_CUBE_ROOT(X)            Y**3
  
   0.00000   0.00000        0.00000   0.00000        0.00000   0.00000
  -1.00000   0.00000        0.50000   0.86603       -1.00000   0.00000
   0.00000   8.00000        1.73205   1.00000        0.00000   8.00000
   0.70711   0.70711        0.96593   0.25882        0.70711   0.70711
   0.00000  -1.00000        0.00000   1.00000        0.00000  -1.00000
  
 TEST128
   R_ZETA computes the Riemann Zeta function.
  
   P    Zeta(P)
  
   1.50000       2.54915    
   2.00000       1.64493    
   2.50000       1.34144    
   3.00000       1.20206    
   3.50000       1.12673    
   4.00000       1.08232    
   4.50000       1.05471    
   5.00000       1.03693    
   5.50000       1.02520    
   6.00000       1.01734    
  
 SUBPAK_PRB
   Normal end of SUBPAK tests.
